//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserAccessManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SosDbEntities : DbContext
    {
        public SosDbEntities()
            : base("name=SosDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<GCompany> GCompanies { get; set; }
        public virtual DbSet<GKeyValue> GKeyValues { get; set; }
        public virtual DbSet<LEmailTemplate> LEmailTemplates { get; set; }
        public virtual DbSet<LPayee> LPayees { get; set; }
        public virtual DbSet<LUserLobby> LUserLobbies { get; set; }
        public virtual DbSet<LUser> LUsers { get; set; }
    
        public virtual ObjectResult<Nullable<int>> SpLogErrorNew(string sourceProject, string controller, string method, string stackTrace, string userName, string errorType, string errorDescription, string resolution, string errorOwner, string fieldName, Nullable<int> sOSBatchNumber, string status, ObjectParameter result)
        {
            var sourceProjectParameter = sourceProject != null ?
                new ObjectParameter("SourceProject", sourceProject) :
                new ObjectParameter("SourceProject", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorDescriptionParameter = errorDescription != null ?
                new ObjectParameter("ErrorDescription", errorDescription) :
                new ObjectParameter("ErrorDescription", typeof(string));
    
            var resolutionParameter = resolution != null ?
                new ObjectParameter("Resolution", resolution) :
                new ObjectParameter("Resolution", typeof(string));
    
            var errorOwnerParameter = errorOwner != null ?
                new ObjectParameter("ErrorOwner", errorOwner) :
                new ObjectParameter("ErrorOwner", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var sOSBatchNumberParameter = sOSBatchNumber.HasValue ?
                new ObjectParameter("SOSBatchNumber", sOSBatchNumber) :
                new ObjectParameter("SOSBatchNumber", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpLogErrorNew", sourceProjectParameter, controllerParameter, methodParameter, stackTraceParameter, userNameParameter, errorTypeParameter, errorDescriptionParameter, resolutionParameter, errorOwnerParameter, fieldNameParameter, sOSBatchNumberParameter, statusParameter, result);
        }
    
        public virtual int SpLogEmail(string recipientList, string cCList, string bCCList, string replyToList, string subject, string body, Nullable<bool> isHTML, string emailType, string priority, string attachmentList, string status, string comments, string createdById, string updatedById, string senderAccountName, string bucketName, string acessKey, string secretKey)
        {
            var recipientListParameter = recipientList != null ?
                new ObjectParameter("RecipientList", recipientList) :
                new ObjectParameter("RecipientList", typeof(string));
    
            var cCListParameter = cCList != null ?
                new ObjectParameter("CCList", cCList) :
                new ObjectParameter("CCList", typeof(string));
    
            var bCCListParameter = bCCList != null ?
                new ObjectParameter("BCCList", bCCList) :
                new ObjectParameter("BCCList", typeof(string));
    
            var replyToListParameter = replyToList != null ?
                new ObjectParameter("ReplyToList", replyToList) :
                new ObjectParameter("ReplyToList", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var isHTMLParameter = isHTML.HasValue ?
                new ObjectParameter("IsHTML", isHTML) :
                new ObjectParameter("IsHTML", typeof(bool));
    
            var emailTypeParameter = emailType != null ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var attachmentListParameter = attachmentList != null ?
                new ObjectParameter("AttachmentList", attachmentList) :
                new ObjectParameter("AttachmentList", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByIdParameter = createdById != null ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(string));
    
            var updatedByIdParameter = updatedById != null ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(string));
    
            var senderAccountNameParameter = senderAccountName != null ?
                new ObjectParameter("SenderAccountName", senderAccountName) :
                new ObjectParameter("SenderAccountName", typeof(string));
    
            var bucketNameParameter = bucketName != null ?
                new ObjectParameter("BucketName", bucketName) :
                new ObjectParameter("BucketName", typeof(string));
    
            var acessKeyParameter = acessKey != null ?
                new ObjectParameter("AcessKey", acessKey) :
                new ObjectParameter("AcessKey", typeof(string));
    
            var secretKeyParameter = secretKey != null ?
                new ObjectParameter("SecretKey", secretKey) :
                new ObjectParameter("SecretKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogEmail", recipientListParameter, cCListParameter, bCCListParameter, replyToListParameter, subjectParameter, bodyParameter, isHTMLParameter, emailTypeParameter, priorityParameter, attachmentListParameter, statusParameter, commentsParameter, createdByIdParameter, updatedByIdParameter, senderAccountNameParameter, bucketNameParameter, acessKeyParameter, secretKeyParameter);
        }
    }
}
