//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vodafone_SOS_WebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SOSEDMV10Entities : DbContext
    {
        public SOSEDMV10Entities()
            : base("name=SOSEDMV10Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Debug> Debugs { get; set; }
        public virtual DbSet<GAuthorizableObject> GAuthorizableObjects { get; set; }
        public virtual DbSet<GCompany> GCompanies { get; set; }
        public virtual DbSet<GEmailConfiguration> GEmailConfigurations { get; set; }
        public virtual DbSet<GErrorLog> GErrorLogs { get; set; }
        public virtual DbSet<GKeyValue> GKeyValues { get; set; }
        public virtual DbSet<GMenu> GMenus { get; set; }
        public virtual DbSet<GSecurityQuestion> GSecurityQuestions { get; set; }
        public virtual DbSet<GUserActivityLog> GUserActivityLogs { get; set; }
        public virtual DbSet<LAccrual> LAccruals { get; set; }
        public virtual DbSet<LAllocationRule> LAllocationRules { get; set; }
        public virtual DbSet<LAttachment> LAttachments { get; set; }
        public virtual DbSet<LAudit> LAudits { get; set; }
        public virtual DbSet<LBatch> LBatches { get; set; }
        public virtual DbSet<LBatchFile> LBatchFiles { get; set; }
        public virtual DbSet<LChangeRequest> LChangeRequests { get; set; }
        public virtual DbSet<LClaim> LClaims { get; set; }
        public virtual DbSet<LCommissionBatchAllocationRule> LCommissionBatchAllocationRules { get; set; }
        public virtual DbSet<LCommissionPeriod> LCommissionPeriods { get; set; }
        public virtual DbSet<LCompanySpecificColumn> LCompanySpecificColumns { get; set; }
        public virtual DbSet<LCompanySpecificRawDataColumn> LCompanySpecificRawDataColumns { get; set; }
        public virtual DbSet<LDashboardConfig> LDashboardConfigs { get; set; }
        public virtual DbSet<LDatabas> LDatabases { get; set; }
        public virtual DbSet<LDelegation> LDelegations { get; set; }
        public virtual DbSet<LDocumentSet> LDocumentSets { get; set; }
        public virtual DbSet<LDropDown> LDropDowns { get; set; }
        public virtual DbSet<LDropDownValue> LDropDownValues { get; set; }
        public virtual DbSet<LEmailBucket> LEmailBuckets { get; set; }
        public virtual DbSet<LEmailTemplate> LEmailTemplates { get; set; }
        public virtual DbSet<LMessageAllowedRole> LMessageAllowedRoles { get; set; }
        public virtual DbSet<LMessageRecipient> LMessageRecipients { get; set; }
        public virtual DbSet<LMessage> LMessages { get; set; }
        public virtual DbSet<LPasswordHistory> LPasswordHistories { get; set; }
        public virtual DbSet<LPasswordPolicy> LPasswordPolicies { get; set; }
        public virtual DbSet<LPayeeParent> LPayeeParents { get; set; }
        public virtual DbSet<LPayee> LPayees { get; set; }
        public virtual DbSet<LPortfolio> LPortfolios { get; set; }
        public virtual DbSet<LRawDataTable> LRawDataTables { get; set; }
        public virtual DbSet<LReadyToPay> LReadyToPays { get; set; }
        public virtual DbSet<LReadyToPayDetail> LReadyToPayDetails { get; set; }
        public virtual DbSet<LReadyToPayPortfolio> LReadyToPayPortfolios { get; set; }
        public virtual DbSet<LRefFile> LRefFiles { get; set; }
        public virtual DbSet<LRefFileType> LRefFileTypes { get; set; }
        public virtual DbSet<LScheme> LSchemes { get; set; }
        public virtual DbSet<LSMSBucket> LSMSBuckets { get; set; }
        public virtual DbSet<LSupportingDocument> LSupportingDocuments { get; set; }
        public virtual DbSet<LSupportRespons> LSupportResponses { get; set; }
        public virtual DbSet<LSupportTicketAssignment> LSupportTicketAssignments { get; set; }
        public virtual DbSet<LSupportTicket> LSupportTickets { get; set; }
        public virtual DbSet<LUser> LUsers { get; set; }
        public virtual DbSet<LWorkFlowActionItem> LWorkFlowActionItems { get; set; }
        public virtual DbSet<LWorkFlowActionParameter> LWorkFlowActionParameters { get; set; }
        public virtual DbSet<LWorkFlowConfig> LWorkFlowConfigs { get; set; }
        public virtual DbSet<LWorkflowGridColumn> LWorkflowGridColumns { get; set; }
        public virtual DbSet<MAspnetRolesGAuthorizableObject> MAspnetRolesGAuthorizableObjects { get; set; }
        public virtual DbSet<MAspnetUsersGSecurityQuestion> MAspnetUsersGSecurityQuestions { get; set; }
        public virtual DbSet<MDocumentSetsPayee> MDocumentSetsPayees { get; set; }
        public virtual DbSet<MEntityPortfolio> MEntityPortfolios { get; set; }
        public virtual DbSet<MGMenusAspnetRole> MGMenusAspnetRoles { get; set; }
        public virtual DbSet<MSupportTicketPortfolio> MSupportTicketPortfolios { get; set; }
        public virtual DbSet<RActivityType> RActivityTypes { get; set; }
        public virtual DbSet<RBrand> RBrands { get; set; }
        public virtual DbSet<RChannel> RChannels { get; set; }
        public virtual DbSet<RCommissionType> RCommissionTypes { get; set; }
        public virtual DbSet<RDeviceType> RDeviceTypes { get; set; }
        public virtual DbSet<RPayPublishEmail> RPayPublishEmails { get; set; }
        public virtual DbSet<RProductCode> RProductCodes { get; set; }
        public virtual DbSet<RRejectionReason> RRejectionReasons { get; set; }
        public virtual DbSet<RStatus> RStatuses { get; set; }
        public virtual DbSet<RStatusOwner> RStatusOwners { get; set; }
        public virtual DbSet<RSubChannel> RSubChannels { get; set; }
        public virtual DbSet<RSupportCategory> RSupportCategories { get; set; }
        public virtual DbSet<RSupportQuickTicket> RSupportQuickTickets { get; set; }
        public virtual DbSet<RsupportTeam> RsupportTeams { get; set; }
        public virtual DbSet<RWorkFlow> RWorkFlows { get; set; }
        public virtual DbSet<XBatchChildren> XBatchChildrens { get; set; }
        public virtual DbSet<XBatch> XBatches { get; set; }
        public virtual DbSet<XBatchPortfolio> XBatchPortfolios { get; set; }
        public virtual DbSet<LNotification> LNotifications { get; set; }
        public virtual DbSet<RTicketStage> RTicketStages { get; set; }
        public virtual DbSet<LCompanySpecificForm> LCompanySpecificForms { get; set; }
        public virtual DbSet<LUserLobby> LUserLobbies { get; set; }
        public virtual DbSet<LUserPreference> LUserPreferences { get; set; }
        public virtual DbSet<LSchemeOwner> LSchemeOwners { get; set; }
    
        [DbFunction("SOSEDMV10Entities", "FNGetDBContext")]
        public virtual IQueryable<FNGetDBContext_Result> FNGetDBContext(string commissionPeriod, Nullable<int> companyId)
        {
            var commissionPeriodParameter = commissionPeriod != null ?
                new ObjectParameter("CommissionPeriod", commissionPeriod) :
                new ObjectParameter("CommissionPeriod", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FNGetDBContext_Result>("[SOSEDMV10Entities].[FNGetDBContext](@CommissionPeriod, @CompanyId)", commissionPeriodParameter, companyIdParameter);
        }
    
        [DbFunction("SOSEDMV10Entities", "FNGetPayPublishedBatchNumber")]
        public virtual IQueryable<FNGetPayPublishedBatchNumber_Result> FNGetPayPublishedBatchNumber(Nullable<int> transactionId, Nullable<int> companyId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FNGetPayPublishedBatchNumber_Result>("[SOSEDMV10Entities].[FNGetPayPublishedBatchNumber](@TransactionId, @CompanyId)", transactionIdParameter, companyIdParameter);
        }
    
        [DbFunction("SOSEDMV10Entities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[SOSEDMV10Entities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int GetCalcReport(string source, string primaryChannel, Nullable<int> pageSize, Nullable<int> pageNumber, string payeeList, string minSubscriberNumber, string maxSubscriberNumber, string minBAN, string maxBAN, string minIMEI, string maxIMEI, string activityType, string productCode, string commissionType, Nullable<int> minContractDuration, Nullable<int> maxContractDuration, Nullable<decimal> minCommissionAmount, Nullable<decimal> maxCommissionAmount, string companyCode, Nullable<System.DateTime> minOrderDate, Nullable<System.DateTime> maxOrderDate, Nullable<System.DateTime> minConnectionDate, Nullable<System.DateTime> maxConnectionDate, Nullable<System.DateTime> minTerminationDate, Nullable<System.DateTime> maxTerminationDate, string commissionPeriod)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var primaryChannelParameter = primaryChannel != null ?
                new ObjectParameter("PrimaryChannel", primaryChannel) :
                new ObjectParameter("PrimaryChannel", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var payeeListParameter = payeeList != null ?
                new ObjectParameter("PayeeList", payeeList) :
                new ObjectParameter("PayeeList", typeof(string));
    
            var minSubscriberNumberParameter = minSubscriberNumber != null ?
                new ObjectParameter("MinSubscriberNumber", minSubscriberNumber) :
                new ObjectParameter("MinSubscriberNumber", typeof(string));
    
            var maxSubscriberNumberParameter = maxSubscriberNumber != null ?
                new ObjectParameter("MaxSubscriberNumber", maxSubscriberNumber) :
                new ObjectParameter("MaxSubscriberNumber", typeof(string));
    
            var minBANParameter = minBAN != null ?
                new ObjectParameter("MinBAN", minBAN) :
                new ObjectParameter("MinBAN", typeof(string));
    
            var maxBANParameter = maxBAN != null ?
                new ObjectParameter("MaxBAN", maxBAN) :
                new ObjectParameter("MaxBAN", typeof(string));
    
            var minIMEIParameter = minIMEI != null ?
                new ObjectParameter("MinIMEI", minIMEI) :
                new ObjectParameter("MinIMEI", typeof(string));
    
            var maxIMEIParameter = maxIMEI != null ?
                new ObjectParameter("MaxIMEI", maxIMEI) :
                new ObjectParameter("MaxIMEI", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var commissionTypeParameter = commissionType != null ?
                new ObjectParameter("CommissionType", commissionType) :
                new ObjectParameter("CommissionType", typeof(string));
    
            var minContractDurationParameter = minContractDuration.HasValue ?
                new ObjectParameter("MinContractDuration", minContractDuration) :
                new ObjectParameter("MinContractDuration", typeof(int));
    
            var maxContractDurationParameter = maxContractDuration.HasValue ?
                new ObjectParameter("MaxContractDuration", maxContractDuration) :
                new ObjectParameter("MaxContractDuration", typeof(int));
    
            var minCommissionAmountParameter = minCommissionAmount.HasValue ?
                new ObjectParameter("MinCommissionAmount", minCommissionAmount) :
                new ObjectParameter("MinCommissionAmount", typeof(decimal));
    
            var maxCommissionAmountParameter = maxCommissionAmount.HasValue ?
                new ObjectParameter("MaxCommissionAmount", maxCommissionAmount) :
                new ObjectParameter("MaxCommissionAmount", typeof(decimal));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var minOrderDateParameter = minOrderDate.HasValue ?
                new ObjectParameter("MinOrderDate", minOrderDate) :
                new ObjectParameter("MinOrderDate", typeof(System.DateTime));
    
            var maxOrderDateParameter = maxOrderDate.HasValue ?
                new ObjectParameter("MaxOrderDate", maxOrderDate) :
                new ObjectParameter("MaxOrderDate", typeof(System.DateTime));
    
            var minConnectionDateParameter = minConnectionDate.HasValue ?
                new ObjectParameter("MinConnectionDate", minConnectionDate) :
                new ObjectParameter("MinConnectionDate", typeof(System.DateTime));
    
            var maxConnectionDateParameter = maxConnectionDate.HasValue ?
                new ObjectParameter("MaxConnectionDate", maxConnectionDate) :
                new ObjectParameter("MaxConnectionDate", typeof(System.DateTime));
    
            var minTerminationDateParameter = minTerminationDate.HasValue ?
                new ObjectParameter("MinTerminationDate", minTerminationDate) :
                new ObjectParameter("MinTerminationDate", typeof(System.DateTime));
    
            var maxTerminationDateParameter = maxTerminationDate.HasValue ?
                new ObjectParameter("MaxTerminationDate", maxTerminationDate) :
                new ObjectParameter("MaxTerminationDate", typeof(System.DateTime));
    
            var commissionPeriodParameter = commissionPeriod != null ?
                new ObjectParameter("CommissionPeriod", commissionPeriod) :
                new ObjectParameter("CommissionPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCalcReport", sourceParameter, primaryChannelParameter, pageSizeParameter, pageNumberParameter, payeeListParameter, minSubscriberNumberParameter, maxSubscriberNumberParameter, minBANParameter, maxBANParameter, minIMEIParameter, maxIMEIParameter, activityTypeParameter, productCodeParameter, commissionTypeParameter, minContractDurationParameter, maxContractDurationParameter, minCommissionAmountParameter, maxCommissionAmountParameter, companyCodeParameter, minOrderDateParameter, maxOrderDateParameter, minConnectionDateParameter, maxConnectionDateParameter, minTerminationDateParameter, maxTerminationDateParameter, commissionPeriodParameter);
        }
    
        public virtual ObjectResult<spGetClaimsReportData_Result> spGetClaimsReportData(string payeeId, string startDate, string endDate, Nullable<int> companyId, string a01Filter, string a01, string a02Filter, string a02, string a03Filter, string a03, string a04Filter, string a04, string a05Filter, string a05, string a06Filter, string a06, string a07Filter, string a07, string a08Filter, string a08, string a09Filter, string a09, string a10Filter, string a10, string allocationDateFilter, string allocationDateFrom, string allocationDateTo, string alreadyPaidDateFilter, string alreadyPaidDateFrom, string alreadyPaidDateTo, string connectionDateFilter, string connectionDateFrom, string connectionDateTo, string lastReclaimDateFilter, string lastReclaimDateFrom, string lastReclaimDateTo, string orderDateFilter, string orderDateFrom, string orderDateTo, string alreadyPaidAmountFilter, string alreadyPaidAmountFrom, string alreadyPaidAmountTo, string clawbackAmountFilter, string clawbackAmountFrom, string clawbackAmountTo, string expectedCommissionAmountFilter, string expectedCommissionAmountFrom, string expectedCommissionAmountTo, string paymentAmountFilter, string paymentAmountFrom, string paymentAmountTo, string bANFilter, string bAN, string customerNameFilter, string customerName, string iMEIFilter, string iMEI, string mSISDNFilter, string mSISDN, string orderNumberFilter, string orderNumber, string paymentBatchNumberFilter, string paymentBatchNumber, string reasonNonAutoPaymentFilter, string reasonNonAutoPayment, string claimBatchNumberFilter, string claimBatchNumber, string clawbackPayeeCodeFilter, string clawbackPayeeCode, string brandIds, string commissionTypeIds, string deviceTypeIds, string paymentCommissionTypeIds, string productCodeIds, string statusFilter, string status, string createdByIds, string activityTypeIds, Nullable<bool> alreadyPaidDealer, string rejectionReasonIds)
        {
            var payeeIdParameter = payeeId != null ?
                new ObjectParameter("PayeeId", payeeId) :
                new ObjectParameter("PayeeId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var a01FilterParameter = a01Filter != null ?
                new ObjectParameter("A01Filter", a01Filter) :
                new ObjectParameter("A01Filter", typeof(string));
    
            var a01Parameter = a01 != null ?
                new ObjectParameter("A01", a01) :
                new ObjectParameter("A01", typeof(string));
    
            var a02FilterParameter = a02Filter != null ?
                new ObjectParameter("A02Filter", a02Filter) :
                new ObjectParameter("A02Filter", typeof(string));
    
            var a02Parameter = a02 != null ?
                new ObjectParameter("A02", a02) :
                new ObjectParameter("A02", typeof(string));
    
            var a03FilterParameter = a03Filter != null ?
                new ObjectParameter("A03Filter", a03Filter) :
                new ObjectParameter("A03Filter", typeof(string));
    
            var a03Parameter = a03 != null ?
                new ObjectParameter("A03", a03) :
                new ObjectParameter("A03", typeof(string));
    
            var a04FilterParameter = a04Filter != null ?
                new ObjectParameter("A04Filter", a04Filter) :
                new ObjectParameter("A04Filter", typeof(string));
    
            var a04Parameter = a04 != null ?
                new ObjectParameter("A04", a04) :
                new ObjectParameter("A04", typeof(string));
    
            var a05FilterParameter = a05Filter != null ?
                new ObjectParameter("A05Filter", a05Filter) :
                new ObjectParameter("A05Filter", typeof(string));
    
            var a05Parameter = a05 != null ?
                new ObjectParameter("A05", a05) :
                new ObjectParameter("A05", typeof(string));
    
            var a06FilterParameter = a06Filter != null ?
                new ObjectParameter("A06Filter", a06Filter) :
                new ObjectParameter("A06Filter", typeof(string));
    
            var a06Parameter = a06 != null ?
                new ObjectParameter("A06", a06) :
                new ObjectParameter("A06", typeof(string));
    
            var a07FilterParameter = a07Filter != null ?
                new ObjectParameter("A07Filter", a07Filter) :
                new ObjectParameter("A07Filter", typeof(string));
    
            var a07Parameter = a07 != null ?
                new ObjectParameter("A07", a07) :
                new ObjectParameter("A07", typeof(string));
    
            var a08FilterParameter = a08Filter != null ?
                new ObjectParameter("A08Filter", a08Filter) :
                new ObjectParameter("A08Filter", typeof(string));
    
            var a08Parameter = a08 != null ?
                new ObjectParameter("A08", a08) :
                new ObjectParameter("A08", typeof(string));
    
            var a09FilterParameter = a09Filter != null ?
                new ObjectParameter("A09Filter", a09Filter) :
                new ObjectParameter("A09Filter", typeof(string));
    
            var a09Parameter = a09 != null ?
                new ObjectParameter("A09", a09) :
                new ObjectParameter("A09", typeof(string));
    
            var a10FilterParameter = a10Filter != null ?
                new ObjectParameter("A10Filter", a10Filter) :
                new ObjectParameter("A10Filter", typeof(string));
    
            var a10Parameter = a10 != null ?
                new ObjectParameter("A10", a10) :
                new ObjectParameter("A10", typeof(string));
    
            var allocationDateFilterParameter = allocationDateFilter != null ?
                new ObjectParameter("AllocationDateFilter", allocationDateFilter) :
                new ObjectParameter("AllocationDateFilter", typeof(string));
    
            var allocationDateFromParameter = allocationDateFrom != null ?
                new ObjectParameter("AllocationDateFrom", allocationDateFrom) :
                new ObjectParameter("AllocationDateFrom", typeof(string));
    
            var allocationDateToParameter = allocationDateTo != null ?
                new ObjectParameter("AllocationDateTo", allocationDateTo) :
                new ObjectParameter("AllocationDateTo", typeof(string));
    
            var alreadyPaidDateFilterParameter = alreadyPaidDateFilter != null ?
                new ObjectParameter("AlreadyPaidDateFilter", alreadyPaidDateFilter) :
                new ObjectParameter("AlreadyPaidDateFilter", typeof(string));
    
            var alreadyPaidDateFromParameter = alreadyPaidDateFrom != null ?
                new ObjectParameter("AlreadyPaidDateFrom", alreadyPaidDateFrom) :
                new ObjectParameter("AlreadyPaidDateFrom", typeof(string));
    
            var alreadyPaidDateToParameter = alreadyPaidDateTo != null ?
                new ObjectParameter("AlreadyPaidDateTo", alreadyPaidDateTo) :
                new ObjectParameter("AlreadyPaidDateTo", typeof(string));
    
            var connectionDateFilterParameter = connectionDateFilter != null ?
                new ObjectParameter("ConnectionDateFilter", connectionDateFilter) :
                new ObjectParameter("ConnectionDateFilter", typeof(string));
    
            var connectionDateFromParameter = connectionDateFrom != null ?
                new ObjectParameter("ConnectionDateFrom", connectionDateFrom) :
                new ObjectParameter("ConnectionDateFrom", typeof(string));
    
            var connectionDateToParameter = connectionDateTo != null ?
                new ObjectParameter("ConnectionDateTo", connectionDateTo) :
                new ObjectParameter("ConnectionDateTo", typeof(string));
    
            var lastReclaimDateFilterParameter = lastReclaimDateFilter != null ?
                new ObjectParameter("LastReclaimDateFilter", lastReclaimDateFilter) :
                new ObjectParameter("LastReclaimDateFilter", typeof(string));
    
            var lastReclaimDateFromParameter = lastReclaimDateFrom != null ?
                new ObjectParameter("LastReclaimDateFrom", lastReclaimDateFrom) :
                new ObjectParameter("LastReclaimDateFrom", typeof(string));
    
            var lastReclaimDateToParameter = lastReclaimDateTo != null ?
                new ObjectParameter("LastReclaimDateTo", lastReclaimDateTo) :
                new ObjectParameter("LastReclaimDateTo", typeof(string));
    
            var orderDateFilterParameter = orderDateFilter != null ?
                new ObjectParameter("OrderDateFilter", orderDateFilter) :
                new ObjectParameter("OrderDateFilter", typeof(string));
    
            var orderDateFromParameter = orderDateFrom != null ?
                new ObjectParameter("OrderDateFrom", orderDateFrom) :
                new ObjectParameter("OrderDateFrom", typeof(string));
    
            var orderDateToParameter = orderDateTo != null ?
                new ObjectParameter("OrderDateTo", orderDateTo) :
                new ObjectParameter("OrderDateTo", typeof(string));
    
            var alreadyPaidAmountFilterParameter = alreadyPaidAmountFilter != null ?
                new ObjectParameter("AlreadyPaidAmountFilter", alreadyPaidAmountFilter) :
                new ObjectParameter("AlreadyPaidAmountFilter", typeof(string));
    
            var alreadyPaidAmountFromParameter = alreadyPaidAmountFrom != null ?
                new ObjectParameter("AlreadyPaidAmountFrom", alreadyPaidAmountFrom) :
                new ObjectParameter("AlreadyPaidAmountFrom", typeof(string));
    
            var alreadyPaidAmountToParameter = alreadyPaidAmountTo != null ?
                new ObjectParameter("AlreadyPaidAmountTo", alreadyPaidAmountTo) :
                new ObjectParameter("AlreadyPaidAmountTo", typeof(string));
    
            var clawbackAmountFilterParameter = clawbackAmountFilter != null ?
                new ObjectParameter("ClawbackAmountFilter", clawbackAmountFilter) :
                new ObjectParameter("ClawbackAmountFilter", typeof(string));
    
            var clawbackAmountFromParameter = clawbackAmountFrom != null ?
                new ObjectParameter("ClawbackAmountFrom", clawbackAmountFrom) :
                new ObjectParameter("ClawbackAmountFrom", typeof(string));
    
            var clawbackAmountToParameter = clawbackAmountTo != null ?
                new ObjectParameter("ClawbackAmountTo", clawbackAmountTo) :
                new ObjectParameter("ClawbackAmountTo", typeof(string));
    
            var expectedCommissionAmountFilterParameter = expectedCommissionAmountFilter != null ?
                new ObjectParameter("ExpectedCommissionAmountFilter", expectedCommissionAmountFilter) :
                new ObjectParameter("ExpectedCommissionAmountFilter", typeof(string));
    
            var expectedCommissionAmountFromParameter = expectedCommissionAmountFrom != null ?
                new ObjectParameter("ExpectedCommissionAmountFrom", expectedCommissionAmountFrom) :
                new ObjectParameter("ExpectedCommissionAmountFrom", typeof(string));
    
            var expectedCommissionAmountToParameter = expectedCommissionAmountTo != null ?
                new ObjectParameter("ExpectedCommissionAmountTo", expectedCommissionAmountTo) :
                new ObjectParameter("ExpectedCommissionAmountTo", typeof(string));
    
            var paymentAmountFilterParameter = paymentAmountFilter != null ?
                new ObjectParameter("PaymentAmountFilter", paymentAmountFilter) :
                new ObjectParameter("PaymentAmountFilter", typeof(string));
    
            var paymentAmountFromParameter = paymentAmountFrom != null ?
                new ObjectParameter("PaymentAmountFrom", paymentAmountFrom) :
                new ObjectParameter("PaymentAmountFrom", typeof(string));
    
            var paymentAmountToParameter = paymentAmountTo != null ?
                new ObjectParameter("PaymentAmountTo", paymentAmountTo) :
                new ObjectParameter("PaymentAmountTo", typeof(string));
    
            var bANFilterParameter = bANFilter != null ?
                new ObjectParameter("BANFilter", bANFilter) :
                new ObjectParameter("BANFilter", typeof(string));
    
            var bANParameter = bAN != null ?
                new ObjectParameter("BAN", bAN) :
                new ObjectParameter("BAN", typeof(string));
    
            var customerNameFilterParameter = customerNameFilter != null ?
                new ObjectParameter("CustomerNameFilter", customerNameFilter) :
                new ObjectParameter("CustomerNameFilter", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var iMEIFilterParameter = iMEIFilter != null ?
                new ObjectParameter("IMEIFilter", iMEIFilter) :
                new ObjectParameter("IMEIFilter", typeof(string));
    
            var iMEIParameter = iMEI != null ?
                new ObjectParameter("IMEI", iMEI) :
                new ObjectParameter("IMEI", typeof(string));
    
            var mSISDNFilterParameter = mSISDNFilter != null ?
                new ObjectParameter("MSISDNFilter", mSISDNFilter) :
                new ObjectParameter("MSISDNFilter", typeof(string));
    
            var mSISDNParameter = mSISDN != null ?
                new ObjectParameter("MSISDN", mSISDN) :
                new ObjectParameter("MSISDN", typeof(string));
    
            var orderNumberFilterParameter = orderNumberFilter != null ?
                new ObjectParameter("OrderNumberFilter", orderNumberFilter) :
                new ObjectParameter("OrderNumberFilter", typeof(string));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var paymentBatchNumberFilterParameter = paymentBatchNumberFilter != null ?
                new ObjectParameter("PaymentBatchNumberFilter", paymentBatchNumberFilter) :
                new ObjectParameter("PaymentBatchNumberFilter", typeof(string));
    
            var paymentBatchNumberParameter = paymentBatchNumber != null ?
                new ObjectParameter("PaymentBatchNumber", paymentBatchNumber) :
                new ObjectParameter("PaymentBatchNumber", typeof(string));
    
            var reasonNonAutoPaymentFilterParameter = reasonNonAutoPaymentFilter != null ?
                new ObjectParameter("ReasonNonAutoPaymentFilter", reasonNonAutoPaymentFilter) :
                new ObjectParameter("ReasonNonAutoPaymentFilter", typeof(string));
    
            var reasonNonAutoPaymentParameter = reasonNonAutoPayment != null ?
                new ObjectParameter("ReasonNonAutoPayment", reasonNonAutoPayment) :
                new ObjectParameter("ReasonNonAutoPayment", typeof(string));
    
            var claimBatchNumberFilterParameter = claimBatchNumberFilter != null ?
                new ObjectParameter("ClaimBatchNumberFilter", claimBatchNumberFilter) :
                new ObjectParameter("ClaimBatchNumberFilter", typeof(string));
    
            var claimBatchNumberParameter = claimBatchNumber != null ?
                new ObjectParameter("ClaimBatchNumber", claimBatchNumber) :
                new ObjectParameter("ClaimBatchNumber", typeof(string));
    
            var clawbackPayeeCodeFilterParameter = clawbackPayeeCodeFilter != null ?
                new ObjectParameter("ClawbackPayeeCodeFilter", clawbackPayeeCodeFilter) :
                new ObjectParameter("ClawbackPayeeCodeFilter", typeof(string));
    
            var clawbackPayeeCodeParameter = clawbackPayeeCode != null ?
                new ObjectParameter("ClawbackPayeeCode", clawbackPayeeCode) :
                new ObjectParameter("ClawbackPayeeCode", typeof(string));
    
            var brandIdsParameter = brandIds != null ?
                new ObjectParameter("BrandIds", brandIds) :
                new ObjectParameter("BrandIds", typeof(string));
    
            var commissionTypeIdsParameter = commissionTypeIds != null ?
                new ObjectParameter("CommissionTypeIds", commissionTypeIds) :
                new ObjectParameter("CommissionTypeIds", typeof(string));
    
            var deviceTypeIdsParameter = deviceTypeIds != null ?
                new ObjectParameter("DeviceTypeIds", deviceTypeIds) :
                new ObjectParameter("DeviceTypeIds", typeof(string));
    
            var paymentCommissionTypeIdsParameter = paymentCommissionTypeIds != null ?
                new ObjectParameter("PaymentCommissionTypeIds", paymentCommissionTypeIds) :
                new ObjectParameter("PaymentCommissionTypeIds", typeof(string));
    
            var productCodeIdsParameter = productCodeIds != null ?
                new ObjectParameter("ProductCodeIds", productCodeIds) :
                new ObjectParameter("ProductCodeIds", typeof(string));
    
            var statusFilterParameter = statusFilter != null ?
                new ObjectParameter("StatusFilter", statusFilter) :
                new ObjectParameter("StatusFilter", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByIdsParameter = createdByIds != null ?
                new ObjectParameter("CreatedByIds", createdByIds) :
                new ObjectParameter("CreatedByIds", typeof(string));
    
            var activityTypeIdsParameter = activityTypeIds != null ?
                new ObjectParameter("ActivityTypeIds", activityTypeIds) :
                new ObjectParameter("ActivityTypeIds", typeof(string));
    
            var alreadyPaidDealerParameter = alreadyPaidDealer.HasValue ?
                new ObjectParameter("AlreadyPaidDealer", alreadyPaidDealer) :
                new ObjectParameter("AlreadyPaidDealer", typeof(bool));
    
            var rejectionReasonIdsParameter = rejectionReasonIds != null ?
                new ObjectParameter("RejectionReasonIds", rejectionReasonIds) :
                new ObjectParameter("RejectionReasonIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClaimsReportData_Result>("spGetClaimsReportData", payeeIdParameter, startDateParameter, endDateParameter, companyIdParameter, a01FilterParameter, a01Parameter, a02FilterParameter, a02Parameter, a03FilterParameter, a03Parameter, a04FilterParameter, a04Parameter, a05FilterParameter, a05Parameter, a06FilterParameter, a06Parameter, a07FilterParameter, a07Parameter, a08FilterParameter, a08Parameter, a09FilterParameter, a09Parameter, a10FilterParameter, a10Parameter, allocationDateFilterParameter, allocationDateFromParameter, allocationDateToParameter, alreadyPaidDateFilterParameter, alreadyPaidDateFromParameter, alreadyPaidDateToParameter, connectionDateFilterParameter, connectionDateFromParameter, connectionDateToParameter, lastReclaimDateFilterParameter, lastReclaimDateFromParameter, lastReclaimDateToParameter, orderDateFilterParameter, orderDateFromParameter, orderDateToParameter, alreadyPaidAmountFilterParameter, alreadyPaidAmountFromParameter, alreadyPaidAmountToParameter, clawbackAmountFilterParameter, clawbackAmountFromParameter, clawbackAmountToParameter, expectedCommissionAmountFilterParameter, expectedCommissionAmountFromParameter, expectedCommissionAmountToParameter, paymentAmountFilterParameter, paymentAmountFromParameter, paymentAmountToParameter, bANFilterParameter, bANParameter, customerNameFilterParameter, customerNameParameter, iMEIFilterParameter, iMEIParameter, mSISDNFilterParameter, mSISDNParameter, orderNumberFilterParameter, orderNumberParameter, paymentBatchNumberFilterParameter, paymentBatchNumberParameter, reasonNonAutoPaymentFilterParameter, reasonNonAutoPaymentParameter, claimBatchNumberFilterParameter, claimBatchNumberParameter, clawbackPayeeCodeFilterParameter, clawbackPayeeCodeParameter, brandIdsParameter, commissionTypeIdsParameter, deviceTypeIdsParameter, paymentCommissionTypeIdsParameter, productCodeIdsParameter, statusFilterParameter, statusParameter, createdByIdsParameter, activityTypeIdsParameter, alreadyPaidDealerParameter, rejectionReasonIdsParameter);
        }
    
        public virtual int SpGetColumnNamesForXSchemaTable(Nullable<int> lrawDataTableId)
        {
            var lrawDataTableIdParameter = lrawDataTableId.HasValue ?
                new ObjectParameter("LrawDataTableId", lrawDataTableId) :
                new ObjectParameter("LrawDataTableId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetColumnNamesForXSchemaTable", lrawDataTableIdParameter);
        }
    
        public virtual ObjectResult<SPGetDBContext_Result> SPGetDBContext(string commissionPeriod, Nullable<int> companyId)
        {
            var commissionPeriodParameter = commissionPeriod != null ?
                new ObjectParameter("CommissionPeriod", commissionPeriod) :
                new ObjectParameter("CommissionPeriod", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDBContext_Result>("SPGetDBContext", commissionPeriodParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<SPGetFilteredClaimsResults_Result> SPGetFilteredClaimsResults(Nullable<int> id, Nullable<System.DateTime> orderDate, Nullable<int> companyId, Nullable<decimal> expectedCommissionAmount, string wFStatus, Nullable<int> payeeId, string mSISDN, Nullable<System.DateTime> createdDateTime, string wFOrdinal)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var expectedCommissionAmountParameter = expectedCommissionAmount.HasValue ?
                new ObjectParameter("ExpectedCommissionAmount", expectedCommissionAmount) :
                new ObjectParameter("ExpectedCommissionAmount", typeof(decimal));
    
            var wFStatusParameter = wFStatus != null ?
                new ObjectParameter("WFStatus", wFStatus) :
                new ObjectParameter("WFStatus", typeof(string));
    
            var payeeIdParameter = payeeId.HasValue ?
                new ObjectParameter("PayeeId", payeeId) :
                new ObjectParameter("PayeeId", typeof(int));
    
            var mSISDNParameter = mSISDN != null ?
                new ObjectParameter("MSISDN", mSISDN) :
                new ObjectParameter("MSISDN", typeof(string));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            var wFOrdinalParameter = wFOrdinal != null ?
                new ObjectParameter("WFOrdinal", wFOrdinal) :
                new ObjectParameter("WFOrdinal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetFilteredClaimsResults_Result>("SPGetFilteredClaimsResults", idParameter, orderDateParameter, companyIdParameter, expectedCommissionAmountParameter, wFStatusParameter, payeeIdParameter, mSISDNParameter, createdDateTimeParameter, wFOrdinalParameter);
        }
    
        public virtual ObjectResult<SPGetFilteredPayeeResults_Result> SPGetFilteredPayeeResults(Nullable<int> id, string primaryChannel, Nullable<int> companyId, Nullable<int> parentId, string wFStatus, string payeeCode, string email, Nullable<System.DateTime> effectiveStartDate, Nullable<System.DateTime> effectiveEndDate, Nullable<int> channelId, string wFOrdinal, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var primaryChannelParameter = primaryChannel != null ?
                new ObjectParameter("PrimaryChannel", primaryChannel) :
                new ObjectParameter("PrimaryChannel", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var wFStatusParameter = wFStatus != null ?
                new ObjectParameter("WFStatus", wFStatus) :
                new ObjectParameter("WFStatus", typeof(string));
    
            var payeeCodeParameter = payeeCode != null ?
                new ObjectParameter("PayeeCode", payeeCode) :
                new ObjectParameter("PayeeCode", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var effectiveStartDateParameter = effectiveStartDate.HasValue ?
                new ObjectParameter("EffectiveStartDate", effectiveStartDate) :
                new ObjectParameter("EffectiveStartDate", typeof(System.DateTime));
    
            var effectiveEndDateParameter = effectiveEndDate.HasValue ?
                new ObjectParameter("EffectiveEndDate", effectiveEndDate) :
                new ObjectParameter("EffectiveEndDate", typeof(System.DateTime));
    
            var channelIdParameter = channelId.HasValue ?
                new ObjectParameter("ChannelId", channelId) :
                new ObjectParameter("ChannelId", typeof(int));
    
            var wFOrdinalParameter = wFOrdinal != null ?
                new ObjectParameter("WFOrdinal", wFOrdinal) :
                new ObjectParameter("WFOrdinal", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetFilteredPayeeResults_Result>("SPGetFilteredPayeeResults", idParameter, primaryChannelParameter, companyIdParameter, parentIdParameter, wFStatusParameter, payeeCodeParameter, emailParameter, effectiveStartDateParameter, effectiveEndDateParameter, channelIdParameter, wFOrdinalParameter, userIdParameter);
        }
    
        public virtual int SPGetGenericGridData(Nullable<int> workflowConfigId, string loggedInRoleId, string loggedInUserId, string workflowName, Nullable<int> companyId, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery, string tabName, string portfolioList)
        {
            var workflowConfigIdParameter = workflowConfigId.HasValue ?
                new ObjectParameter("WorkflowConfigId", workflowConfigId) :
                new ObjectParameter("WorkflowConfigId", typeof(int));
    
            var loggedInRoleIdParameter = loggedInRoleId != null ?
                new ObjectParameter("LoggedInRoleId", loggedInRoleId) :
                new ObjectParameter("LoggedInRoleId", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId != null ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(string));
    
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("WorkflowName", workflowName) :
                new ObjectParameter("WorkflowName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            var portfolioListParameter = portfolioList != null ?
                new ObjectParameter("PortfolioList", portfolioList) :
                new ObjectParameter("PortfolioList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetGenericGridData", workflowConfigIdParameter, loggedInRoleIdParameter, loggedInUserIdParameter, workflowNameParameter, companyIdParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter, tabNameParameter, portfolioListParameter);
        }
    
        public virtual ObjectResult<string> SPGetIdentifier(string workflowName, Nullable<int> transactionId, string wFBaseTableName, ObjectParameter identifier)
        {
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("WorkflowName", workflowName) :
                new ObjectParameter("WorkflowName", typeof(string));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var wFBaseTableNameParameter = wFBaseTableName != null ?
                new ObjectParameter("WFBaseTableName", wFBaseTableName) :
                new ObjectParameter("WFBaseTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPGetIdentifier", workflowNameParameter, transactionIdParameter, wFBaseTableNameParameter, identifier);
        }
    
        public virtual ObjectResult<string> spGetKpiData(string identifier, string type, string companyCode, string userID, Nullable<int> roleId, string period, string dimension, string portfolioList, string payeeIdList, string batchStatus)
        {
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            var dimensionParameter = dimension != null ?
                new ObjectParameter("Dimension", dimension) :
                new ObjectParameter("Dimension", typeof(string));
    
            var portfolioListParameter = portfolioList != null ?
                new ObjectParameter("PortfolioList", portfolioList) :
                new ObjectParameter("PortfolioList", typeof(string));
    
            var payeeIdListParameter = payeeIdList != null ?
                new ObjectParameter("PayeeIdList", payeeIdList) :
                new ObjectParameter("PayeeIdList", typeof(string));
    
            var batchStatusParameter = batchStatus != null ?
                new ObjectParameter("BatchStatus", batchStatus) :
                new ObjectParameter("BatchStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetKpiData", identifierParameter, typeParameter, companyCodeParameter, userIDParameter, roleIdParameter, periodParameter, dimensionParameter, portfolioListParameter, payeeIdListParameter, batchStatusParameter);
        }
    
        public virtual ObjectResult<SPGetPayeeData_Result> SPGetPayeeData(string userRole, string currentUserId, Nullable<int> companyId, string portfolioList, string sortdatafield, string sortorder, Nullable<int> pagesize, Nullable<int> pagenum, string filterQuery, string payeeId)
        {
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var currentUserIdParameter = currentUserId != null ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var portfolioListParameter = portfolioList != null ?
                new ObjectParameter("PortfolioList", portfolioList) :
                new ObjectParameter("PortfolioList", typeof(string));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var pagenumParameter = pagenum.HasValue ?
                new ObjectParameter("pagenum", pagenum) :
                new ObjectParameter("pagenum", typeof(int));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var payeeIdParameter = payeeId != null ?
                new ObjectParameter("PayeeId", payeeId) :
                new ObjectParameter("PayeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetPayeeData_Result>("SPGetPayeeData", userRoleParameter, currentUserIdParameter, companyIdParameter, portfolioListParameter, sortdatafieldParameter, sortorderParameter, pagesizeParameter, pagenumParameter, filterQueryParameter, payeeIdParameter);
        }
    
        public virtual ObjectResult<string> SPGetUserForAllocation(string baseTable, string wFType, Nullable<int> transactionID, Nullable<int> wFOrdinal, Nullable<int> companyID, string loggedInUserId, ObjectParameter wFCurrentOwnerID)
        {
            var baseTableParameter = baseTable != null ?
                new ObjectParameter("BaseTable", baseTable) :
                new ObjectParameter("BaseTable", typeof(string));
    
            var wFTypeParameter = wFType != null ?
                new ObjectParameter("WFType", wFType) :
                new ObjectParameter("WFType", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var wFOrdinalParameter = wFOrdinal.HasValue ?
                new ObjectParameter("WFOrdinal", wFOrdinal) :
                new ObjectParameter("WFOrdinal", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId != null ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPGetUserForAllocation", baseTableParameter, wFTypeParameter, transactionIDParameter, wFOrdinalParameter, companyIDParameter, loggedInUserIdParameter, wFCurrentOwnerID);
        }
    
        public virtual int spGetUserReportTreeStrucure(string treeType, string loggedInUserEmail, string userRole, string opCo, string commissionPeriod, string filterQuery, string sortdatafield, string sortorder, Nullable<int> pagesize, Nullable<int> pagenum)
        {
            var treeTypeParameter = treeType != null ?
                new ObjectParameter("TreeType", treeType) :
                new ObjectParameter("TreeType", typeof(string));
    
            var loggedInUserEmailParameter = loggedInUserEmail != null ?
                new ObjectParameter("LoggedInUserEmail", loggedInUserEmail) :
                new ObjectParameter("LoggedInUserEmail", typeof(string));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var opCoParameter = opCo != null ?
                new ObjectParameter("OpCo", opCo) :
                new ObjectParameter("OpCo", typeof(string));
    
            var commissionPeriodParameter = commissionPeriod != null ?
                new ObjectParameter("CommissionPeriod", commissionPeriod) :
                new ObjectParameter("CommissionPeriod", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var pagenumParameter = pagenum.HasValue ?
                new ObjectParameter("pagenum", pagenum) :
                new ObjectParameter("pagenum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserReportTreeStrucure", treeTypeParameter, loggedInUserEmailParameter, userRoleParameter, opCoParameter, commissionPeriodParameter, filterQueryParameter, sortdatafieldParameter, sortorderParameter, pagesizeParameter, pagenumParameter);
        }
    
        public virtual int SpLogAudit(string sOSProcessName, string l3ProcessName, string controlCode, string controlDecription, string action, string actionType, string actionedById, Nullable<System.DateTime> actionDateTime, string oldStatus, string newStatus, string entityType, Nullable<int> entityId, string entityName, Nullable<int> workFlowId, Nullable<int> companyId, string comments, string roleId, string laPeriod)
        {
            var sOSProcessNameParameter = sOSProcessName != null ?
                new ObjectParameter("SOSProcessName", sOSProcessName) :
                new ObjectParameter("SOSProcessName", typeof(string));
    
            var l3ProcessNameParameter = l3ProcessName != null ?
                new ObjectParameter("L3ProcessName", l3ProcessName) :
                new ObjectParameter("L3ProcessName", typeof(string));
    
            var controlCodeParameter = controlCode != null ?
                new ObjectParameter("ControlCode", controlCode) :
                new ObjectParameter("ControlCode", typeof(string));
    
            var controlDecriptionParameter = controlDecription != null ?
                new ObjectParameter("ControlDecription", controlDecription) :
                new ObjectParameter("ControlDecription", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            var actionedByIdParameter = actionedById != null ?
                new ObjectParameter("ActionedById", actionedById) :
                new ObjectParameter("ActionedById", typeof(string));
    
            var actionDateTimeParameter = actionDateTime.HasValue ?
                new ObjectParameter("ActionDateTime", actionDateTime) :
                new ObjectParameter("ActionDateTime", typeof(System.DateTime));
    
            var oldStatusParameter = oldStatus != null ?
                new ObjectParameter("OldStatus", oldStatus) :
                new ObjectParameter("OldStatus", typeof(string));
    
            var newStatusParameter = newStatus != null ?
                new ObjectParameter("NewStatus", newStatus) :
                new ObjectParameter("NewStatus", typeof(string));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityNameParameter = entityName != null ?
                new ObjectParameter("EntityName", entityName) :
                new ObjectParameter("EntityName", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            var laPeriodParameter = laPeriod != null ?
                new ObjectParameter("LaPeriod", laPeriod) :
                new ObjectParameter("LaPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogAudit", sOSProcessNameParameter, l3ProcessNameParameter, controlCodeParameter, controlDecriptionParameter, actionParameter, actionTypeParameter, actionedByIdParameter, actionDateTimeParameter, oldStatusParameter, newStatusParameter, entityTypeParameter, entityIdParameter, entityNameParameter, workFlowIdParameter, companyIdParameter, commentsParameter, roleIdParameter, laPeriodParameter);
        }
    
        public virtual int SpLogEmail(string recipientList, string cCList, string bCCList, string replyToList, string subject, string body, Nullable<bool> isHTML, string emailType, string priority, string attachmentList, string status, string comments, string createdById, string updatedById, string senderAccountName, string bucketName, string acessKey, string secretKey)
        {
            var recipientListParameter = recipientList != null ?
                new ObjectParameter("RecipientList", recipientList) :
                new ObjectParameter("RecipientList", typeof(string));
    
            var cCListParameter = cCList != null ?
                new ObjectParameter("CCList", cCList) :
                new ObjectParameter("CCList", typeof(string));
    
            var bCCListParameter = bCCList != null ?
                new ObjectParameter("BCCList", bCCList) :
                new ObjectParameter("BCCList", typeof(string));
    
            var replyToListParameter = replyToList != null ?
                new ObjectParameter("ReplyToList", replyToList) :
                new ObjectParameter("ReplyToList", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var isHTMLParameter = isHTML.HasValue ?
                new ObjectParameter("IsHTML", isHTML) :
                new ObjectParameter("IsHTML", typeof(bool));
    
            var emailTypeParameter = emailType != null ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var attachmentListParameter = attachmentList != null ?
                new ObjectParameter("AttachmentList", attachmentList) :
                new ObjectParameter("AttachmentList", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByIdParameter = createdById != null ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(string));
    
            var updatedByIdParameter = updatedById != null ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(string));
    
            var senderAccountNameParameter = senderAccountName != null ?
                new ObjectParameter("SenderAccountName", senderAccountName) :
                new ObjectParameter("SenderAccountName", typeof(string));
    
            var bucketNameParameter = bucketName != null ?
                new ObjectParameter("BucketName", bucketName) :
                new ObjectParameter("BucketName", typeof(string));
    
            var acessKeyParameter = acessKey != null ?
                new ObjectParameter("AcessKey", acessKey) :
                new ObjectParameter("AcessKey", typeof(string));
    
            var secretKeyParameter = secretKey != null ?
                new ObjectParameter("SecretKey", secretKey) :
                new ObjectParameter("SecretKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogEmail", recipientListParameter, cCListParameter, bCCListParameter, replyToListParameter, subjectParameter, bodyParameter, isHTMLParameter, emailTypeParameter, priorityParameter, attachmentListParameter, statusParameter, commentsParameter, createdByIdParameter, updatedByIdParameter, senderAccountNameParameter, bucketNameParameter, acessKeyParameter, secretKeyParameter);
        }
    
        public virtual int SpLogError(string sourceProject, string controller, string method, string stackTrace, string userName, string errorType, string errorDescription, string resolution, string errorOwner, string fieldName, Nullable<int> sOSBatchNumber, string status)
        {
            var sourceProjectParameter = sourceProject != null ?
                new ObjectParameter("SourceProject", sourceProject) :
                new ObjectParameter("SourceProject", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorDescriptionParameter = errorDescription != null ?
                new ObjectParameter("ErrorDescription", errorDescription) :
                new ObjectParameter("ErrorDescription", typeof(string));
    
            var resolutionParameter = resolution != null ?
                new ObjectParameter("Resolution", resolution) :
                new ObjectParameter("Resolution", typeof(string));
    
            var errorOwnerParameter = errorOwner != null ?
                new ObjectParameter("ErrorOwner", errorOwner) :
                new ObjectParameter("ErrorOwner", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var sOSBatchNumberParameter = sOSBatchNumber.HasValue ?
                new ObjectParameter("SOSBatchNumber", sOSBatchNumber) :
                new ObjectParameter("SOSBatchNumber", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogError", sourceProjectParameter, controllerParameter, methodParameter, stackTraceParameter, userNameParameter, errorTypeParameter, errorDescriptionParameter, resolutionParameter, errorOwnerParameter, fieldNameParameter, sOSBatchNumberParameter, statusParameter);
        }
    
        public virtual int spReadyToPayData(Nullable<int> rTPID, Nullable<int> companyID, Nullable<bool> isBatchList, string type, string rTPStatus, string action, string payBatchName, string batchCommPeriod, string rTPData, string createdBy, string updatedBy, string strPortfolios, string role, Nullable<bool> emailDocuments, Nullable<bool> sendPayeeDocuments, string payPublishEmailIds, string projectEnviournment, string sortdatafield, string sortorder, Nullable<int> pageSize, Nullable<int> pageNumber, string filterQuery, Nullable<bool> isClaimChanged, Nullable<bool> isCalChanged, Nullable<bool> isMAChanged)
        {
            var rTPIDParameter = rTPID.HasValue ?
                new ObjectParameter("RTPID", rTPID) :
                new ObjectParameter("RTPID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isBatchListParameter = isBatchList.HasValue ?
                new ObjectParameter("IsBatchList", isBatchList) :
                new ObjectParameter("IsBatchList", typeof(bool));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var rTPStatusParameter = rTPStatus != null ?
                new ObjectParameter("RTPStatus", rTPStatus) :
                new ObjectParameter("RTPStatus", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var payBatchNameParameter = payBatchName != null ?
                new ObjectParameter("PayBatchName", payBatchName) :
                new ObjectParameter("PayBatchName", typeof(string));
    
            var batchCommPeriodParameter = batchCommPeriod != null ?
                new ObjectParameter("BatchCommPeriod", batchCommPeriod) :
                new ObjectParameter("BatchCommPeriod", typeof(string));
    
            var rTPDataParameter = rTPData != null ?
                new ObjectParameter("RTPData", rTPData) :
                new ObjectParameter("RTPData", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var strPortfoliosParameter = strPortfolios != null ?
                new ObjectParameter("strPortfolios", strPortfolios) :
                new ObjectParameter("strPortfolios", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var emailDocumentsParameter = emailDocuments.HasValue ?
                new ObjectParameter("EmailDocuments", emailDocuments) :
                new ObjectParameter("EmailDocuments", typeof(bool));
    
            var sendPayeeDocumentsParameter = sendPayeeDocuments.HasValue ?
                new ObjectParameter("SendPayeeDocuments", sendPayeeDocuments) :
                new ObjectParameter("SendPayeeDocuments", typeof(bool));
    
            var payPublishEmailIdsParameter = payPublishEmailIds != null ?
                new ObjectParameter("PayPublishEmailIds", payPublishEmailIds) :
                new ObjectParameter("PayPublishEmailIds", typeof(string));
    
            var projectEnviournmentParameter = projectEnviournment != null ?
                new ObjectParameter("ProjectEnviournment", projectEnviournment) :
                new ObjectParameter("ProjectEnviournment", typeof(string));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var isClaimChangedParameter = isClaimChanged.HasValue ?
                new ObjectParameter("IsClaimChanged", isClaimChanged) :
                new ObjectParameter("IsClaimChanged", typeof(bool));
    
            var isCalChangedParameter = isCalChanged.HasValue ?
                new ObjectParameter("IsCalChanged", isCalChanged) :
                new ObjectParameter("IsCalChanged", typeof(bool));
    
            var isMAChangedParameter = isMAChanged.HasValue ?
                new ObjectParameter("isMAChanged", isMAChanged) :
                new ObjectParameter("isMAChanged", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReadyToPayData", rTPIDParameter, companyIDParameter, isBatchListParameter, typeParameter, rTPStatusParameter, actionParameter, payBatchNameParameter, batchCommPeriodParameter, rTPDataParameter, createdByParameter, updatedByParameter, strPortfoliosParameter, roleParameter, emailDocumentsParameter, sendPayeeDocumentsParameter, payPublishEmailIdsParameter, projectEnviournmentParameter, sortdatafieldParameter, sortorderParameter, pageSizeParameter, pageNumberParameter, filterQueryParameter, isClaimChangedParameter, isCalChangedParameter, isMAChangedParameter);
        }
    
        public virtual int SPTestUpdatePayee(Nullable<int> id, string firstName, string lastName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTestUpdatePayee", idParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int SPUpdateActionStatus(string action, string workFlowName, string transactionIdList, Nullable<int> companyId, string loggedInUserId, string comments, string currentRoleId, string projectEnviournment, string assigneeUserId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var workFlowNameParameter = workFlowName != null ?
                new ObjectParameter("WorkFlowName", workFlowName) :
                new ObjectParameter("WorkFlowName", typeof(string));
    
            var transactionIdListParameter = transactionIdList != null ?
                new ObjectParameter("TransactionIdList", transactionIdList) :
                new ObjectParameter("TransactionIdList", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId != null ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var currentRoleIdParameter = currentRoleId != null ?
                new ObjectParameter("CurrentRoleId", currentRoleId) :
                new ObjectParameter("CurrentRoleId", typeof(string));
    
            var projectEnviournmentParameter = projectEnviournment != null ?
                new ObjectParameter("ProjectEnviournment", projectEnviournment) :
                new ObjectParameter("ProjectEnviournment", typeof(string));
    
            var assigneeUserIdParameter = assigneeUserId != null ?
                new ObjectParameter("AssigneeUserId", assigneeUserId) :
                new ObjectParameter("AssigneeUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPUpdateActionStatus", actionParameter, workFlowNameParameter, transactionIdListParameter, companyIdParameter, loggedInUserIdParameter, commentsParameter, currentRoleIdParameter, projectEnviournmentParameter, assigneeUserIdParameter);
        }
    
        public virtual int SpUpdateChangeRequestData(string changedIdList, string statusName, string comments, string updatedBy, Nullable<System.DateTime> updatedDateTimeUTC)
        {
            var changedIdListParameter = changedIdList != null ?
                new ObjectParameter("ChangedIdList", changedIdList) :
                new ObjectParameter("ChangedIdList", typeof(string));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedDateTimeUTCParameter = updatedDateTimeUTC.HasValue ?
                new ObjectParameter("UpdatedDateTimeUTC", updatedDateTimeUTC) :
                new ObjectParameter("UpdatedDateTimeUTC", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateChangeRequestData", changedIdListParameter, statusNameParameter, commentsParameter, updatedByParameter, updatedDateTimeUTCParameter);
        }
    
        public virtual int SPValidatePayeeParent(string payeeCode, string parentCode, string payeePrimaryChannel, Nullable<System.DateTime> effectiveStartDate, Nullable<int> companyId)
        {
            var payeeCodeParameter = payeeCode != null ?
                new ObjectParameter("PayeeCode", payeeCode) :
                new ObjectParameter("PayeeCode", typeof(string));
    
            var parentCodeParameter = parentCode != null ?
                new ObjectParameter("ParentCode", parentCode) :
                new ObjectParameter("ParentCode", typeof(string));
    
            var payeePrimaryChannelParameter = payeePrimaryChannel != null ?
                new ObjectParameter("PayeePrimaryChannel", payeePrimaryChannel) :
                new ObjectParameter("PayeePrimaryChannel", typeof(string));
    
            var effectiveStartDateParameter = effectiveStartDate.HasValue ?
                new ObjectParameter("EffectiveStartDate", effectiveStartDate) :
                new ObjectParameter("EffectiveStartDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPValidatePayeeParent", payeeCodeParameter, parentCodeParameter, payeePrimaryChannelParameter, effectiveStartDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPWfIsLastOrdinal(string baseTableName, Nullable<int> workflowId, Nullable<int> transactionID, Nullable<int> companyID, ObjectParameter isMaxOrdinal)
        {
            var baseTableNameParameter = baseTableName != null ?
                new ObjectParameter("BaseTableName", baseTableName) :
                new ObjectParameter("BaseTableName", typeof(string));
    
            var workflowIdParameter = workflowId.HasValue ?
                new ObjectParameter("WorkflowId", workflowId) :
                new ObjectParameter("WorkflowId", typeof(int));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPWfIsLastOrdinal", baseTableNameParameter, workflowIdParameter, transactionIDParameter, companyIDParameter, isMaxOrdinal);
        }
    
        public virtual ObjectResult<USPGetLPayeeById_Result> USPGetLPayeeById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPGetLPayeeById_Result>("USPGetLPayeeById", idParameter);
        }
    
        public virtual int USPGetParentDropDown(Nullable<int> companyId, string sortdatafield, string sortorder, Nullable<int> pagesize, Nullable<int> pagenum, string filterQuery, string parentPayeeId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var pagenumParameter = pagenum.HasValue ?
                new ObjectParameter("pagenum", pagenum) :
                new ObjectParameter("pagenum", typeof(int));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var parentPayeeIdParameter = parentPayeeId != null ?
                new ObjectParameter("ParentPayeeId", parentPayeeId) :
                new ObjectParameter("ParentPayeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPGetParentDropDown", companyIdParameter, sortdatafieldParameter, sortorderParameter, pagesizeParameter, pagenumParameter, filterQueryParameter, parentPayeeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USPPostLClaims(Nullable<int> lcCompanyId, string lcCreatedById, Nullable<int> lcBrandId, Nullable<int> lcActivityTypeId, Nullable<int> lcCommissionTypeId, string lcAllocatedToId, string lcAllocatedById, Nullable<int> lcRejectionReasonId, Nullable<int> lcPaymentCommissionTypeId, string lcApprovedById, string lcSentForApprovalById, string lcWithdrawnById, string lcRejectedById, Nullable<int> lcDeviceTypeId, Nullable<long> lcClaimId, Nullable<System.DateTime> lcConnectionDate, Nullable<System.DateTime> lcOrderDate, Nullable<int> lcProductCodeId, Nullable<decimal> lcExpectedCommissionAmount, string lcIsDuplicateClaim, string lcDuplicateClaimDetails, Nullable<System.DateTime> lcAllocationDate, Nullable<bool> lcIsReclaim, Nullable<decimal> lcAlreadyPaidAmount, Nullable<System.DateTime> lcAlreadyPaidDate, string lcAlreadyPaidDealer, string lcReasonNonAutoPayment, string lcClawbackPayeeCode, Nullable<decimal> lcClawbackAmount, Nullable<System.DateTime> lcSentForApprovalDate, Nullable<System.DateTime> lcApprovalDate, Nullable<System.DateTime> lcPaymentDate, Nullable<System.DateTime> lcLastReclaimDate, Nullable<System.DateTime> lcWithdrawnDate, Nullable<System.DateTime> lcRejectionDate, Nullable<decimal> lcPaymentAmount, Nullable<int> lcPaymentBatchNumber, Nullable<int> lcClaimBatchNumber, Nullable<System.DateTime> lcCreatedDateTime, string wFRequesterId, string wFAnalystId, Nullable<int> wFOrdinal, string wFManagerId, string wFCurrentOwnerId, string wFStatus, string wFType, string wFRequesterRoleId, Nullable<int> wFCompanyId, string wFComments, string parameterCarrier, Nullable<bool> lcCreatedByForm, string lcMSISDN, string lcCustomerName, string lcBAN, string lcIMEI, string lcOrderNumber, string a01, string a02, string a03, string a04, string a05, string a06, string a07, string a08, string a09, string a10, Nullable<int> id, Nullable<int> lcPayeeId, string action, string lcCommissionPeriod, Nullable<int> lcParentPayeeId)
        {
            var lcCompanyIdParameter = lcCompanyId.HasValue ?
                new ObjectParameter("LcCompanyId", lcCompanyId) :
                new ObjectParameter("LcCompanyId", typeof(int));
    
            var lcCreatedByIdParameter = lcCreatedById != null ?
                new ObjectParameter("LcCreatedById", lcCreatedById) :
                new ObjectParameter("LcCreatedById", typeof(string));
    
            var lcBrandIdParameter = lcBrandId.HasValue ?
                new ObjectParameter("LcBrandId", lcBrandId) :
                new ObjectParameter("LcBrandId", typeof(int));
    
            var lcActivityTypeIdParameter = lcActivityTypeId.HasValue ?
                new ObjectParameter("LcActivityTypeId", lcActivityTypeId) :
                new ObjectParameter("LcActivityTypeId", typeof(int));
    
            var lcCommissionTypeIdParameter = lcCommissionTypeId.HasValue ?
                new ObjectParameter("LcCommissionTypeId", lcCommissionTypeId) :
                new ObjectParameter("LcCommissionTypeId", typeof(int));
    
            var lcAllocatedToIdParameter = lcAllocatedToId != null ?
                new ObjectParameter("LcAllocatedToId", lcAllocatedToId) :
                new ObjectParameter("LcAllocatedToId", typeof(string));
    
            var lcAllocatedByIdParameter = lcAllocatedById != null ?
                new ObjectParameter("LcAllocatedById", lcAllocatedById) :
                new ObjectParameter("LcAllocatedById", typeof(string));
    
            var lcRejectionReasonIdParameter = lcRejectionReasonId.HasValue ?
                new ObjectParameter("LcRejectionReasonId", lcRejectionReasonId) :
                new ObjectParameter("LcRejectionReasonId", typeof(int));
    
            var lcPaymentCommissionTypeIdParameter = lcPaymentCommissionTypeId.HasValue ?
                new ObjectParameter("LcPaymentCommissionTypeId", lcPaymentCommissionTypeId) :
                new ObjectParameter("LcPaymentCommissionTypeId", typeof(int));
    
            var lcApprovedByIdParameter = lcApprovedById != null ?
                new ObjectParameter("LcApprovedById", lcApprovedById) :
                new ObjectParameter("LcApprovedById", typeof(string));
    
            var lcSentForApprovalByIdParameter = lcSentForApprovalById != null ?
                new ObjectParameter("LcSentForApprovalById", lcSentForApprovalById) :
                new ObjectParameter("LcSentForApprovalById", typeof(string));
    
            var lcWithdrawnByIdParameter = lcWithdrawnById != null ?
                new ObjectParameter("LcWithdrawnById", lcWithdrawnById) :
                new ObjectParameter("LcWithdrawnById", typeof(string));
    
            var lcRejectedByIdParameter = lcRejectedById != null ?
                new ObjectParameter("LcRejectedById", lcRejectedById) :
                new ObjectParameter("LcRejectedById", typeof(string));
    
            var lcDeviceTypeIdParameter = lcDeviceTypeId.HasValue ?
                new ObjectParameter("LcDeviceTypeId", lcDeviceTypeId) :
                new ObjectParameter("LcDeviceTypeId", typeof(int));
    
            var lcClaimIdParameter = lcClaimId.HasValue ?
                new ObjectParameter("LcClaimId", lcClaimId) :
                new ObjectParameter("LcClaimId", typeof(long));
    
            var lcConnectionDateParameter = lcConnectionDate.HasValue ?
                new ObjectParameter("LcConnectionDate", lcConnectionDate) :
                new ObjectParameter("LcConnectionDate", typeof(System.DateTime));
    
            var lcOrderDateParameter = lcOrderDate.HasValue ?
                new ObjectParameter("LcOrderDate", lcOrderDate) :
                new ObjectParameter("LcOrderDate", typeof(System.DateTime));
    
            var lcProductCodeIdParameter = lcProductCodeId.HasValue ?
                new ObjectParameter("LcProductCodeId", lcProductCodeId) :
                new ObjectParameter("LcProductCodeId", typeof(int));
    
            var lcExpectedCommissionAmountParameter = lcExpectedCommissionAmount.HasValue ?
                new ObjectParameter("LcExpectedCommissionAmount", lcExpectedCommissionAmount) :
                new ObjectParameter("LcExpectedCommissionAmount", typeof(decimal));
    
            var lcIsDuplicateClaimParameter = lcIsDuplicateClaim != null ?
                new ObjectParameter("LcIsDuplicateClaim", lcIsDuplicateClaim) :
                new ObjectParameter("LcIsDuplicateClaim", typeof(string));
    
            var lcDuplicateClaimDetailsParameter = lcDuplicateClaimDetails != null ?
                new ObjectParameter("LcDuplicateClaimDetails", lcDuplicateClaimDetails) :
                new ObjectParameter("LcDuplicateClaimDetails", typeof(string));
    
            var lcAllocationDateParameter = lcAllocationDate.HasValue ?
                new ObjectParameter("LcAllocationDate", lcAllocationDate) :
                new ObjectParameter("LcAllocationDate", typeof(System.DateTime));
    
            var lcIsReclaimParameter = lcIsReclaim.HasValue ?
                new ObjectParameter("LcIsReclaim", lcIsReclaim) :
                new ObjectParameter("LcIsReclaim", typeof(bool));
    
            var lcAlreadyPaidAmountParameter = lcAlreadyPaidAmount.HasValue ?
                new ObjectParameter("LcAlreadyPaidAmount", lcAlreadyPaidAmount) :
                new ObjectParameter("LcAlreadyPaidAmount", typeof(decimal));
    
            var lcAlreadyPaidDateParameter = lcAlreadyPaidDate.HasValue ?
                new ObjectParameter("LcAlreadyPaidDate", lcAlreadyPaidDate) :
                new ObjectParameter("LcAlreadyPaidDate", typeof(System.DateTime));
    
            var lcAlreadyPaidDealerParameter = lcAlreadyPaidDealer != null ?
                new ObjectParameter("LcAlreadyPaidDealer", lcAlreadyPaidDealer) :
                new ObjectParameter("LcAlreadyPaidDealer", typeof(string));
    
            var lcReasonNonAutoPaymentParameter = lcReasonNonAutoPayment != null ?
                new ObjectParameter("LcReasonNonAutoPayment", lcReasonNonAutoPayment) :
                new ObjectParameter("LcReasonNonAutoPayment", typeof(string));
    
            var lcClawbackPayeeCodeParameter = lcClawbackPayeeCode != null ?
                new ObjectParameter("LcClawbackPayeeCode", lcClawbackPayeeCode) :
                new ObjectParameter("LcClawbackPayeeCode", typeof(string));
    
            var lcClawbackAmountParameter = lcClawbackAmount.HasValue ?
                new ObjectParameter("LcClawbackAmount", lcClawbackAmount) :
                new ObjectParameter("LcClawbackAmount", typeof(decimal));
    
            var lcSentForApprovalDateParameter = lcSentForApprovalDate.HasValue ?
                new ObjectParameter("LcSentForApprovalDate", lcSentForApprovalDate) :
                new ObjectParameter("LcSentForApprovalDate", typeof(System.DateTime));
    
            var lcApprovalDateParameter = lcApprovalDate.HasValue ?
                new ObjectParameter("LcApprovalDate", lcApprovalDate) :
                new ObjectParameter("LcApprovalDate", typeof(System.DateTime));
    
            var lcPaymentDateParameter = lcPaymentDate.HasValue ?
                new ObjectParameter("LcPaymentDate", lcPaymentDate) :
                new ObjectParameter("LcPaymentDate", typeof(System.DateTime));
    
            var lcLastReclaimDateParameter = lcLastReclaimDate.HasValue ?
                new ObjectParameter("LcLastReclaimDate", lcLastReclaimDate) :
                new ObjectParameter("LcLastReclaimDate", typeof(System.DateTime));
    
            var lcWithdrawnDateParameter = lcWithdrawnDate.HasValue ?
                new ObjectParameter("LcWithdrawnDate", lcWithdrawnDate) :
                new ObjectParameter("LcWithdrawnDate", typeof(System.DateTime));
    
            var lcRejectionDateParameter = lcRejectionDate.HasValue ?
                new ObjectParameter("LcRejectionDate", lcRejectionDate) :
                new ObjectParameter("LcRejectionDate", typeof(System.DateTime));
    
            var lcPaymentAmountParameter = lcPaymentAmount.HasValue ?
                new ObjectParameter("LcPaymentAmount", lcPaymentAmount) :
                new ObjectParameter("LcPaymentAmount", typeof(decimal));
    
            var lcPaymentBatchNumberParameter = lcPaymentBatchNumber.HasValue ?
                new ObjectParameter("LcPaymentBatchNumber", lcPaymentBatchNumber) :
                new ObjectParameter("LcPaymentBatchNumber", typeof(int));
    
            var lcClaimBatchNumberParameter = lcClaimBatchNumber.HasValue ?
                new ObjectParameter("LcClaimBatchNumber", lcClaimBatchNumber) :
                new ObjectParameter("LcClaimBatchNumber", typeof(int));
    
            var lcCreatedDateTimeParameter = lcCreatedDateTime.HasValue ?
                new ObjectParameter("LcCreatedDateTime", lcCreatedDateTime) :
                new ObjectParameter("LcCreatedDateTime", typeof(System.DateTime));
    
            var wFRequesterIdParameter = wFRequesterId != null ?
                new ObjectParameter("WFRequesterId", wFRequesterId) :
                new ObjectParameter("WFRequesterId", typeof(string));
    
            var wFAnalystIdParameter = wFAnalystId != null ?
                new ObjectParameter("WFAnalystId", wFAnalystId) :
                new ObjectParameter("WFAnalystId", typeof(string));
    
            var wFOrdinalParameter = wFOrdinal.HasValue ?
                new ObjectParameter("WFOrdinal", wFOrdinal) :
                new ObjectParameter("WFOrdinal", typeof(int));
    
            var wFManagerIdParameter = wFManagerId != null ?
                new ObjectParameter("WFManagerId", wFManagerId) :
                new ObjectParameter("WFManagerId", typeof(string));
    
            var wFCurrentOwnerIdParameter = wFCurrentOwnerId != null ?
                new ObjectParameter("WFCurrentOwnerId", wFCurrentOwnerId) :
                new ObjectParameter("WFCurrentOwnerId", typeof(string));
    
            var wFStatusParameter = wFStatus != null ?
                new ObjectParameter("WFStatus", wFStatus) :
                new ObjectParameter("WFStatus", typeof(string));
    
            var wFTypeParameter = wFType != null ?
                new ObjectParameter("WFType", wFType) :
                new ObjectParameter("WFType", typeof(string));
    
            var wFRequesterRoleIdParameter = wFRequesterRoleId != null ?
                new ObjectParameter("WFRequesterRoleId", wFRequesterRoleId) :
                new ObjectParameter("WFRequesterRoleId", typeof(string));
    
            var wFCompanyIdParameter = wFCompanyId.HasValue ?
                new ObjectParameter("WFCompanyId", wFCompanyId) :
                new ObjectParameter("WFCompanyId", typeof(int));
    
            var wFCommentsParameter = wFComments != null ?
                new ObjectParameter("WFComments", wFComments) :
                new ObjectParameter("WFComments", typeof(string));
    
            var parameterCarrierParameter = parameterCarrier != null ?
                new ObjectParameter("ParameterCarrier", parameterCarrier) :
                new ObjectParameter("ParameterCarrier", typeof(string));
    
            var lcCreatedByFormParameter = lcCreatedByForm.HasValue ?
                new ObjectParameter("LcCreatedByForm", lcCreatedByForm) :
                new ObjectParameter("LcCreatedByForm", typeof(bool));
    
            var lcMSISDNParameter = lcMSISDN != null ?
                new ObjectParameter("LcMSISDN", lcMSISDN) :
                new ObjectParameter("LcMSISDN", typeof(string));
    
            var lcCustomerNameParameter = lcCustomerName != null ?
                new ObjectParameter("LcCustomerName", lcCustomerName) :
                new ObjectParameter("LcCustomerName", typeof(string));
    
            var lcBANParameter = lcBAN != null ?
                new ObjectParameter("LcBAN", lcBAN) :
                new ObjectParameter("LcBAN", typeof(string));
    
            var lcIMEIParameter = lcIMEI != null ?
                new ObjectParameter("LcIMEI", lcIMEI) :
                new ObjectParameter("LcIMEI", typeof(string));
    
            var lcOrderNumberParameter = lcOrderNumber != null ?
                new ObjectParameter("LcOrderNumber", lcOrderNumber) :
                new ObjectParameter("LcOrderNumber", typeof(string));
    
            var a01Parameter = a01 != null ?
                new ObjectParameter("A01", a01) :
                new ObjectParameter("A01", typeof(string));
    
            var a02Parameter = a02 != null ?
                new ObjectParameter("A02", a02) :
                new ObjectParameter("A02", typeof(string));
    
            var a03Parameter = a03 != null ?
                new ObjectParameter("A03", a03) :
                new ObjectParameter("A03", typeof(string));
    
            var a04Parameter = a04 != null ?
                new ObjectParameter("A04", a04) :
                new ObjectParameter("A04", typeof(string));
    
            var a05Parameter = a05 != null ?
                new ObjectParameter("A05", a05) :
                new ObjectParameter("A05", typeof(string));
    
            var a06Parameter = a06 != null ?
                new ObjectParameter("A06", a06) :
                new ObjectParameter("A06", typeof(string));
    
            var a07Parameter = a07 != null ?
                new ObjectParameter("A07", a07) :
                new ObjectParameter("A07", typeof(string));
    
            var a08Parameter = a08 != null ?
                new ObjectParameter("A08", a08) :
                new ObjectParameter("A08", typeof(string));
    
            var a09Parameter = a09 != null ?
                new ObjectParameter("A09", a09) :
                new ObjectParameter("A09", typeof(string));
    
            var a10Parameter = a10 != null ?
                new ObjectParameter("A10", a10) :
                new ObjectParameter("A10", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var lcPayeeIdParameter = lcPayeeId.HasValue ?
                new ObjectParameter("LcPayeeId", lcPayeeId) :
                new ObjectParameter("LcPayeeId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var lcCommissionPeriodParameter = lcCommissionPeriod != null ?
                new ObjectParameter("LcCommissionPeriod", lcCommissionPeriod) :
                new ObjectParameter("LcCommissionPeriod", typeof(string));
    
            var lcParentPayeeIdParameter = lcParentPayeeId.HasValue ?
                new ObjectParameter("LcParentPayeeId", lcParentPayeeId) :
                new ObjectParameter("LcParentPayeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USPPostLClaims", lcCompanyIdParameter, lcCreatedByIdParameter, lcBrandIdParameter, lcActivityTypeIdParameter, lcCommissionTypeIdParameter, lcAllocatedToIdParameter, lcAllocatedByIdParameter, lcRejectionReasonIdParameter, lcPaymentCommissionTypeIdParameter, lcApprovedByIdParameter, lcSentForApprovalByIdParameter, lcWithdrawnByIdParameter, lcRejectedByIdParameter, lcDeviceTypeIdParameter, lcClaimIdParameter, lcConnectionDateParameter, lcOrderDateParameter, lcProductCodeIdParameter, lcExpectedCommissionAmountParameter, lcIsDuplicateClaimParameter, lcDuplicateClaimDetailsParameter, lcAllocationDateParameter, lcIsReclaimParameter, lcAlreadyPaidAmountParameter, lcAlreadyPaidDateParameter, lcAlreadyPaidDealerParameter, lcReasonNonAutoPaymentParameter, lcClawbackPayeeCodeParameter, lcClawbackAmountParameter, lcSentForApprovalDateParameter, lcApprovalDateParameter, lcPaymentDateParameter, lcLastReclaimDateParameter, lcWithdrawnDateParameter, lcRejectionDateParameter, lcPaymentAmountParameter, lcPaymentBatchNumberParameter, lcClaimBatchNumberParameter, lcCreatedDateTimeParameter, wFRequesterIdParameter, wFAnalystIdParameter, wFOrdinalParameter, wFManagerIdParameter, wFCurrentOwnerIdParameter, wFStatusParameter, wFTypeParameter, wFRequesterRoleIdParameter, wFCompanyIdParameter, wFCommentsParameter, parameterCarrierParameter, lcCreatedByFormParameter, lcMSISDNParameter, lcCustomerNameParameter, lcBANParameter, lcIMEIParameter, lcOrderNumberParameter, a01Parameter, a02Parameter, a03Parameter, a04Parameter, a05Parameter, a06Parameter, a07Parameter, a08Parameter, a09Parameter, a10Parameter, idParameter, lcPayeeIdParameter, actionParameter, lcCommissionPeriodParameter, lcParentPayeeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USPPostLPayee(string lpUserId, Nullable<int> lpCompanyId, Nullable<int> lpChannelId, Nullable<int> lpSubChannelId, string lpCreatedById, string lpUpdatedById, string lpPrimaryChannel, string lpPayeeCode, string lpEmail, Nullable<System.DateTime> lpEffectiveStartDate, Nullable<System.DateTime> lpEffectiveEndDate, string lpFileNames, string lpUserFriendlyFileNames, string lpBusinessUnit, Nullable<bool> lpCanRaiseClaims, string lpChannelManager, Nullable<System.DateTime> lpCreatedDateTime, Nullable<System.DateTime> lpUpdatedDateTime, string lpTIN, string lpDistributionChannel, string lpPosition, Nullable<int> lpBatchNumber, Nullable<bool> lpCreateLogin, string wFRequesterId, string wFAnalystId, Nullable<int> wFOrdinal, string wFManagerId, string wFCurrentOwnerId, string wFStatus, string wFType, string wFRequesterRoleId, Nullable<int> wFCompanyId, string wFComments, string lpFinOpsRoles, string parameterCarrier, Nullable<bool> lpCreatedByForm, string lpFirstName, string lpLastName, string lpPhone, string lpAddress, string lpTradingName, string a01, string a02, string a03, string a04, string a05, string a06, string a07, string a08, string a09, string a10, Nullable<bool> lpBlockNotification, Nullable<int> id, string action)
        {
            var lpUserIdParameter = lpUserId != null ?
                new ObjectParameter("LpUserId", lpUserId) :
                new ObjectParameter("LpUserId", typeof(string));
    
            var lpCompanyIdParameter = lpCompanyId.HasValue ?
                new ObjectParameter("LpCompanyId", lpCompanyId) :
                new ObjectParameter("LpCompanyId", typeof(int));
    
            var lpChannelIdParameter = lpChannelId.HasValue ?
                new ObjectParameter("LpChannelId", lpChannelId) :
                new ObjectParameter("LpChannelId", typeof(int));
    
            var lpSubChannelIdParameter = lpSubChannelId.HasValue ?
                new ObjectParameter("LpSubChannelId", lpSubChannelId) :
                new ObjectParameter("LpSubChannelId", typeof(int));
    
            var lpCreatedByIdParameter = lpCreatedById != null ?
                new ObjectParameter("LpCreatedById", lpCreatedById) :
                new ObjectParameter("LpCreatedById", typeof(string));
    
            var lpUpdatedByIdParameter = lpUpdatedById != null ?
                new ObjectParameter("LpUpdatedById", lpUpdatedById) :
                new ObjectParameter("LpUpdatedById", typeof(string));
    
            var lpPrimaryChannelParameter = lpPrimaryChannel != null ?
                new ObjectParameter("LpPrimaryChannel", lpPrimaryChannel) :
                new ObjectParameter("LpPrimaryChannel", typeof(string));
    
            var lpPayeeCodeParameter = lpPayeeCode != null ?
                new ObjectParameter("LpPayeeCode", lpPayeeCode) :
                new ObjectParameter("LpPayeeCode", typeof(string));
    
            var lpEmailParameter = lpEmail != null ?
                new ObjectParameter("LpEmail", lpEmail) :
                new ObjectParameter("LpEmail", typeof(string));
    
            var lpEffectiveStartDateParameter = lpEffectiveStartDate.HasValue ?
                new ObjectParameter("LpEffectiveStartDate", lpEffectiveStartDate) :
                new ObjectParameter("LpEffectiveStartDate", typeof(System.DateTime));
    
            var lpEffectiveEndDateParameter = lpEffectiveEndDate.HasValue ?
                new ObjectParameter("LpEffectiveEndDate", lpEffectiveEndDate) :
                new ObjectParameter("LpEffectiveEndDate", typeof(System.DateTime));
    
            var lpFileNamesParameter = lpFileNames != null ?
                new ObjectParameter("LpFileNames", lpFileNames) :
                new ObjectParameter("LpFileNames", typeof(string));
    
            var lpUserFriendlyFileNamesParameter = lpUserFriendlyFileNames != null ?
                new ObjectParameter("LpUserFriendlyFileNames", lpUserFriendlyFileNames) :
                new ObjectParameter("LpUserFriendlyFileNames", typeof(string));
    
            var lpBusinessUnitParameter = lpBusinessUnit != null ?
                new ObjectParameter("LpBusinessUnit", lpBusinessUnit) :
                new ObjectParameter("LpBusinessUnit", typeof(string));
    
            var lpCanRaiseClaimsParameter = lpCanRaiseClaims.HasValue ?
                new ObjectParameter("LpCanRaiseClaims", lpCanRaiseClaims) :
                new ObjectParameter("LpCanRaiseClaims", typeof(bool));
    
            var lpChannelManagerParameter = lpChannelManager != null ?
                new ObjectParameter("LpChannelManager", lpChannelManager) :
                new ObjectParameter("LpChannelManager", typeof(string));
    
            var lpCreatedDateTimeParameter = lpCreatedDateTime.HasValue ?
                new ObjectParameter("LpCreatedDateTime", lpCreatedDateTime) :
                new ObjectParameter("LpCreatedDateTime", typeof(System.DateTime));
    
            var lpUpdatedDateTimeParameter = lpUpdatedDateTime.HasValue ?
                new ObjectParameter("LpUpdatedDateTime", lpUpdatedDateTime) :
                new ObjectParameter("LpUpdatedDateTime", typeof(System.DateTime));
    
            var lpTINParameter = lpTIN != null ?
                new ObjectParameter("LpTIN", lpTIN) :
                new ObjectParameter("LpTIN", typeof(string));
    
            var lpDistributionChannelParameter = lpDistributionChannel != null ?
                new ObjectParameter("LpDistributionChannel", lpDistributionChannel) :
                new ObjectParameter("LpDistributionChannel", typeof(string));
    
            var lpPositionParameter = lpPosition != null ?
                new ObjectParameter("LpPosition", lpPosition) :
                new ObjectParameter("LpPosition", typeof(string));
    
            var lpBatchNumberParameter = lpBatchNumber.HasValue ?
                new ObjectParameter("LpBatchNumber", lpBatchNumber) :
                new ObjectParameter("LpBatchNumber", typeof(int));
    
            var lpCreateLoginParameter = lpCreateLogin.HasValue ?
                new ObjectParameter("LpCreateLogin", lpCreateLogin) :
                new ObjectParameter("LpCreateLogin", typeof(bool));
    
            var wFRequesterIdParameter = wFRequesterId != null ?
                new ObjectParameter("WFRequesterId", wFRequesterId) :
                new ObjectParameter("WFRequesterId", typeof(string));
    
            var wFAnalystIdParameter = wFAnalystId != null ?
                new ObjectParameter("WFAnalystId", wFAnalystId) :
                new ObjectParameter("WFAnalystId", typeof(string));
    
            var wFOrdinalParameter = wFOrdinal.HasValue ?
                new ObjectParameter("WFOrdinal", wFOrdinal) :
                new ObjectParameter("WFOrdinal", typeof(int));
    
            var wFManagerIdParameter = wFManagerId != null ?
                new ObjectParameter("WFManagerId", wFManagerId) :
                new ObjectParameter("WFManagerId", typeof(string));
    
            var wFCurrentOwnerIdParameter = wFCurrentOwnerId != null ?
                new ObjectParameter("WFCurrentOwnerId", wFCurrentOwnerId) :
                new ObjectParameter("WFCurrentOwnerId", typeof(string));
    
            var wFStatusParameter = wFStatus != null ?
                new ObjectParameter("WFStatus", wFStatus) :
                new ObjectParameter("WFStatus", typeof(string));
    
            var wFTypeParameter = wFType != null ?
                new ObjectParameter("WFType", wFType) :
                new ObjectParameter("WFType", typeof(string));
    
            var wFRequesterRoleIdParameter = wFRequesterRoleId != null ?
                new ObjectParameter("WFRequesterRoleId", wFRequesterRoleId) :
                new ObjectParameter("WFRequesterRoleId", typeof(string));
    
            var wFCompanyIdParameter = wFCompanyId.HasValue ?
                new ObjectParameter("WFCompanyId", wFCompanyId) :
                new ObjectParameter("WFCompanyId", typeof(int));
    
            var wFCommentsParameter = wFComments != null ?
                new ObjectParameter("WFComments", wFComments) :
                new ObjectParameter("WFComments", typeof(string));
    
            var lpFinOpsRolesParameter = lpFinOpsRoles != null ?
                new ObjectParameter("LpFinOpsRoles", lpFinOpsRoles) :
                new ObjectParameter("LpFinOpsRoles", typeof(string));
    
            var parameterCarrierParameter = parameterCarrier != null ?
                new ObjectParameter("ParameterCarrier", parameterCarrier) :
                new ObjectParameter("ParameterCarrier", typeof(string));
    
            var lpCreatedByFormParameter = lpCreatedByForm.HasValue ?
                new ObjectParameter("LpCreatedByForm", lpCreatedByForm) :
                new ObjectParameter("LpCreatedByForm", typeof(bool));
    
            var lpFirstNameParameter = lpFirstName != null ?
                new ObjectParameter("LpFirstName", lpFirstName) :
                new ObjectParameter("LpFirstName", typeof(string));
    
            var lpLastNameParameter = lpLastName != null ?
                new ObjectParameter("LpLastName", lpLastName) :
                new ObjectParameter("LpLastName", typeof(string));
    
            var lpPhoneParameter = lpPhone != null ?
                new ObjectParameter("LpPhone", lpPhone) :
                new ObjectParameter("LpPhone", typeof(string));
    
            var lpAddressParameter = lpAddress != null ?
                new ObjectParameter("LpAddress", lpAddress) :
                new ObjectParameter("LpAddress", typeof(string));
    
            var lpTradingNameParameter = lpTradingName != null ?
                new ObjectParameter("LpTradingName", lpTradingName) :
                new ObjectParameter("LpTradingName", typeof(string));
    
            var a01Parameter = a01 != null ?
                new ObjectParameter("A01", a01) :
                new ObjectParameter("A01", typeof(string));
    
            var a02Parameter = a02 != null ?
                new ObjectParameter("A02", a02) :
                new ObjectParameter("A02", typeof(string));
    
            var a03Parameter = a03 != null ?
                new ObjectParameter("A03", a03) :
                new ObjectParameter("A03", typeof(string));
    
            var a04Parameter = a04 != null ?
                new ObjectParameter("A04", a04) :
                new ObjectParameter("A04", typeof(string));
    
            var a05Parameter = a05 != null ?
                new ObjectParameter("A05", a05) :
                new ObjectParameter("A05", typeof(string));
    
            var a06Parameter = a06 != null ?
                new ObjectParameter("A06", a06) :
                new ObjectParameter("A06", typeof(string));
    
            var a07Parameter = a07 != null ?
                new ObjectParameter("A07", a07) :
                new ObjectParameter("A07", typeof(string));
    
            var a08Parameter = a08 != null ?
                new ObjectParameter("A08", a08) :
                new ObjectParameter("A08", typeof(string));
    
            var a09Parameter = a09 != null ?
                new ObjectParameter("A09", a09) :
                new ObjectParameter("A09", typeof(string));
    
            var a10Parameter = a10 != null ?
                new ObjectParameter("A10", a10) :
                new ObjectParameter("A10", typeof(string));
    
            var lpBlockNotificationParameter = lpBlockNotification.HasValue ?
                new ObjectParameter("LpBlockNotification", lpBlockNotification) :
                new ObjectParameter("LpBlockNotification", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USPPostLPayee", lpUserIdParameter, lpCompanyIdParameter, lpChannelIdParameter, lpSubChannelIdParameter, lpCreatedByIdParameter, lpUpdatedByIdParameter, lpPrimaryChannelParameter, lpPayeeCodeParameter, lpEmailParameter, lpEffectiveStartDateParameter, lpEffectiveEndDateParameter, lpFileNamesParameter, lpUserFriendlyFileNamesParameter, lpBusinessUnitParameter, lpCanRaiseClaimsParameter, lpChannelManagerParameter, lpCreatedDateTimeParameter, lpUpdatedDateTimeParameter, lpTINParameter, lpDistributionChannelParameter, lpPositionParameter, lpBatchNumberParameter, lpCreateLoginParameter, wFRequesterIdParameter, wFAnalystIdParameter, wFOrdinalParameter, wFManagerIdParameter, wFCurrentOwnerIdParameter, wFStatusParameter, wFTypeParameter, wFRequesterRoleIdParameter, wFCompanyIdParameter, wFCommentsParameter, lpFinOpsRolesParameter, parameterCarrierParameter, lpCreatedByFormParameter, lpFirstNameParameter, lpLastNameParameter, lpPhoneParameter, lpAddressParameter, lpTradingNameParameter, a01Parameter, a02Parameter, a03Parameter, a04Parameter, a05Parameter, a06Parameter, a07Parameter, a08Parameter, a09Parameter, a10Parameter, lpBlockNotificationParameter, idParameter, actionParameter);
        }
    
        public virtual int SPGetGenericGridCounts(string loggedInRoleId, string loggedInUserId, string workflowName, Nullable<int> companyId, string portfolioList)
        {
            var loggedInRoleIdParameter = loggedInRoleId != null ?
                new ObjectParameter("LoggedInRoleId", loggedInRoleId) :
                new ObjectParameter("LoggedInRoleId", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId != null ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(string));
    
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("WorkflowName", workflowName) :
                new ObjectParameter("WorkflowName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var portfolioListParameter = portfolioList != null ?
                new ObjectParameter("PortfolioList", portfolioList) :
                new ObjectParameter("PortfolioList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetGenericGridCounts", loggedInRoleIdParameter, loggedInUserIdParameter, workflowNameParameter, companyIdParameter, portfolioListParameter);
        }
    
        public virtual int SPGetPayeeDocumentData(string companycode, string paymentBatchNO, string sortdatafield, string sortorder, Nullable<int> pagesize, Nullable<int> pagenum, string filterQuery, string payeeCode)
        {
            var companycodeParameter = companycode != null ?
                new ObjectParameter("companycode", companycode) :
                new ObjectParameter("companycode", typeof(string));
    
            var paymentBatchNOParameter = paymentBatchNO != null ?
                new ObjectParameter("PaymentBatchNO", paymentBatchNO) :
                new ObjectParameter("PaymentBatchNO", typeof(string));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var pagenumParameter = pagenum.HasValue ?
                new ObjectParameter("pagenum", pagenum) :
                new ObjectParameter("pagenum", typeof(int));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var payeeCodeParameter = payeeCode != null ?
                new ObjectParameter("PayeeCode", payeeCode) :
                new ObjectParameter("PayeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetPayeeDocumentData", companycodeParameter, paymentBatchNOParameter, sortdatafieldParameter, sortorderParameter, pagesizeParameter, pagenumParameter, filterQueryParameter, payeeCodeParameter);
        }
    
        public virtual int SpSaveMDocumentSetsPayees(string payeeArray, Nullable<int> id)
        {
            var payeeArrayParameter = payeeArray != null ?
                new ObjectParameter("PayeeArray", payeeArray) :
                new ObjectParameter("PayeeArray", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSaveMDocumentSetsPayees", payeeArrayParameter, idParameter);
        }
    
        public virtual ObjectResult<string> SpSendNotification(Nullable<int> transactionId, Nullable<int> companyId, Nullable<int> workFlowId, Nullable<int> ordinalnumber, string baseTableName, string workflowName, string oldWFStatus, string newWFStatus)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(int));
    
            var ordinalnumberParameter = ordinalnumber.HasValue ?
                new ObjectParameter("Ordinalnumber", ordinalnumber) :
                new ObjectParameter("Ordinalnumber", typeof(int));
    
            var baseTableNameParameter = baseTableName != null ?
                new ObjectParameter("BaseTableName", baseTableName) :
                new ObjectParameter("BaseTableName", typeof(string));
    
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("WorkflowName", workflowName) :
                new ObjectParameter("WorkflowName", typeof(string));
    
            var oldWFStatusParameter = oldWFStatus != null ?
                new ObjectParameter("OldWFStatus", oldWFStatus) :
                new ObjectParameter("OldWFStatus", typeof(string));
    
            var newWFStatusParameter = newWFStatus != null ?
                new ObjectParameter("NewWFStatus", newWFStatus) :
                new ObjectParameter("NewWFStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpSendNotification", transactionIdParameter, companyIdParameter, workFlowIdParameter, ordinalnumberParameter, baseTableNameParameter, workflowNameParameter, oldWFStatusParameter, newWFStatusParameter);
        }
    
        public virtual int SpUpdateClaimsData(string claimsList, string statusName, Nullable<System.DateTime> allocationDate, string allocatedTo, string allocatedBy, Nullable<System.DateTime> approvalDate, string approvedBy, Nullable<int> rejectionReasonId, Nullable<System.DateTime> lastReclaimDate, Nullable<bool> isReclaim, string comments)
        {
            var claimsListParameter = claimsList != null ?
                new ObjectParameter("ClaimsList", claimsList) :
                new ObjectParameter("ClaimsList", typeof(string));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var allocationDateParameter = allocationDate.HasValue ?
                new ObjectParameter("AllocationDate", allocationDate) :
                new ObjectParameter("AllocationDate", typeof(System.DateTime));
    
            var allocatedToParameter = allocatedTo != null ?
                new ObjectParameter("AllocatedTo", allocatedTo) :
                new ObjectParameter("AllocatedTo", typeof(string));
    
            var allocatedByParameter = allocatedBy != null ?
                new ObjectParameter("AllocatedBy", allocatedBy) :
                new ObjectParameter("AllocatedBy", typeof(string));
    
            var approvalDateParameter = approvalDate.HasValue ?
                new ObjectParameter("ApprovalDate", approvalDate) :
                new ObjectParameter("ApprovalDate", typeof(System.DateTime));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var rejectionReasonIdParameter = rejectionReasonId.HasValue ?
                new ObjectParameter("RejectionReasonId", rejectionReasonId) :
                new ObjectParameter("RejectionReasonId", typeof(int));
    
            var lastReclaimDateParameter = lastReclaimDate.HasValue ?
                new ObjectParameter("LastReclaimDate", lastReclaimDate) :
                new ObjectParameter("LastReclaimDate", typeof(System.DateTime));
    
            var isReclaimParameter = isReclaim.HasValue ?
                new ObjectParameter("IsReclaim", isReclaim) :
                new ObjectParameter("IsReclaim", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateClaimsData", claimsListParameter, statusNameParameter, allocationDateParameter, allocatedToParameter, allocatedByParameter, approvalDateParameter, approvedByParameter, rejectionReasonIdParameter, lastReclaimDateParameter, isReclaimParameter, commentsParameter);
        }
    
        public virtual int USPGetMyClaimsReportData(string userID, Nullable<int> companyID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPGetMyClaimsReportData", userIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<string> USPGetPayeeFirstOrLastName(Nullable<int> payeeID, string type)
        {
            var payeeIDParameter = payeeID.HasValue ?
                new ObjectParameter("PayeeID", payeeID) :
                new ObjectParameter("PayeeID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USPGetPayeeFirstOrLastName", payeeIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> USPGetPayeeName(Nullable<int> payeeID, Nullable<bool> addPayeeCode)
        {
            var payeeIDParameter = payeeID.HasValue ?
                new ObjectParameter("PayeeID", payeeID) :
                new ObjectParameter("PayeeID", typeof(int));
    
            var addPayeeCodeParameter = addPayeeCode.HasValue ?
                new ObjectParameter("AddPayeeCode", addPayeeCode) :
                new ObjectParameter("AddPayeeCode", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USPGetPayeeName", payeeIDParameter, addPayeeCodeParameter);
        }
    
        public virtual int USPInsertPayeeDocument(Nullable<int> companyId, string loggedInRoleId, string workFlowName, string commissionPeriod, string createdById, string description, string documentList, string name, string payeeList, Nullable<bool> sendEmail, string updatedById, string comments, string currentOwnerId, string managerId, string requesterRoleId, string requesterId, string attachedFiles, string status, string type, string attachedFilePath, string parameterCarrier, string supportingDocumentFiles, string analystId, Nullable<int> ordinal, string supportingDocumentFilePath, string callType, string payeeListCarrier, string projectEnviournment)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var loggedInRoleIdParameter = loggedInRoleId != null ?
                new ObjectParameter("LoggedInRoleId", loggedInRoleId) :
                new ObjectParameter("LoggedInRoleId", typeof(string));
    
            var workFlowNameParameter = workFlowName != null ?
                new ObjectParameter("WorkFlowName", workFlowName) :
                new ObjectParameter("WorkFlowName", typeof(string));
    
            var commissionPeriodParameter = commissionPeriod != null ?
                new ObjectParameter("CommissionPeriod", commissionPeriod) :
                new ObjectParameter("CommissionPeriod", typeof(string));
    
            var createdByIdParameter = createdById != null ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var documentListParameter = documentList != null ?
                new ObjectParameter("DocumentList", documentList) :
                new ObjectParameter("DocumentList", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var payeeListParameter = payeeList != null ?
                new ObjectParameter("PayeeList", payeeList) :
                new ObjectParameter("PayeeList", typeof(string));
    
            var sendEmailParameter = sendEmail.HasValue ?
                new ObjectParameter("SendEmail", sendEmail) :
                new ObjectParameter("SendEmail", typeof(bool));
    
            var updatedByIdParameter = updatedById != null ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var currentOwnerIdParameter = currentOwnerId != null ?
                new ObjectParameter("CurrentOwnerId", currentOwnerId) :
                new ObjectParameter("CurrentOwnerId", typeof(string));
    
            var managerIdParameter = managerId != null ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(string));
    
            var requesterRoleIdParameter = requesterRoleId != null ?
                new ObjectParameter("RequesterRoleId", requesterRoleId) :
                new ObjectParameter("RequesterRoleId", typeof(string));
    
            var requesterIdParameter = requesterId != null ?
                new ObjectParameter("RequesterId", requesterId) :
                new ObjectParameter("RequesterId", typeof(string));
    
            var attachedFilesParameter = attachedFiles != null ?
                new ObjectParameter("AttachedFiles", attachedFiles) :
                new ObjectParameter("AttachedFiles", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var attachedFilePathParameter = attachedFilePath != null ?
                new ObjectParameter("AttachedFilePath", attachedFilePath) :
                new ObjectParameter("AttachedFilePath", typeof(string));
    
            var parameterCarrierParameter = parameterCarrier != null ?
                new ObjectParameter("ParameterCarrier", parameterCarrier) :
                new ObjectParameter("ParameterCarrier", typeof(string));
    
            var supportingDocumentFilesParameter = supportingDocumentFiles != null ?
                new ObjectParameter("SupportingDocumentFiles", supportingDocumentFiles) :
                new ObjectParameter("SupportingDocumentFiles", typeof(string));
    
            var analystIdParameter = analystId != null ?
                new ObjectParameter("AnalystId", analystId) :
                new ObjectParameter("AnalystId", typeof(string));
    
            var ordinalParameter = ordinal.HasValue ?
                new ObjectParameter("Ordinal", ordinal) :
                new ObjectParameter("Ordinal", typeof(int));
    
            var supportingDocumentFilePathParameter = supportingDocumentFilePath != null ?
                new ObjectParameter("SupportingDocumentFilePath", supportingDocumentFilePath) :
                new ObjectParameter("SupportingDocumentFilePath", typeof(string));
    
            var callTypeParameter = callType != null ?
                new ObjectParameter("CallType", callType) :
                new ObjectParameter("CallType", typeof(string));
    
            var payeeListCarrierParameter = payeeListCarrier != null ?
                new ObjectParameter("PayeeListCarrier", payeeListCarrier) :
                new ObjectParameter("PayeeListCarrier", typeof(string));
    
            var projectEnviournmentParameter = projectEnviournment != null ?
                new ObjectParameter("ProjectEnviournment", projectEnviournment) :
                new ObjectParameter("ProjectEnviournment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPInsertPayeeDocument", companyIdParameter, loggedInRoleIdParameter, workFlowNameParameter, commissionPeriodParameter, createdByIdParameter, descriptionParameter, documentListParameter, nameParameter, payeeListParameter, sendEmailParameter, updatedByIdParameter, commentsParameter, currentOwnerIdParameter, managerIdParameter, requesterRoleIdParameter, requesterIdParameter, attachedFilesParameter, statusParameter, typeParameter, attachedFilePathParameter, parameterCarrierParameter, supportingDocumentFilesParameter, analystIdParameter, ordinalParameter, supportingDocumentFilePathParameter, callTypeParameter, payeeListCarrierParameter, projectEnviournmentParameter);
        }
    
        public virtual ObjectResult<string> USPValidateAndInsertClaimsUploadData(string userID, string userRoleID, Nullable<int> companyID, Nullable<bool> uploadData)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var userRoleIDParameter = userRoleID != null ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var uploadDataParameter = uploadData.HasValue ?
                new ObjectParameter("UploadData", uploadData) :
                new ObjectParameter("UploadData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USPValidateAndInsertClaimsUploadData", userIDParameter, userRoleIDParameter, companyIDParameter, uploadDataParameter);
        }
    }
}
