//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vodafone_SOS_WebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VodafoneSOSLiteEntities : DbContext
    {
        public VodafoneSOSLiteEntities()
            : base("name=VodafoneSOSLiteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_LAllocationRules__> C_LAllocationRules__ { get; set; }
        public virtual DbSet<C_LCommissionBatchAllocationRules_> C_LCommissionBatchAllocationRules_ { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<GAuthorizableObject> GAuthorizableObjects { get; set; }
        public virtual DbSet<GCompany> GCompanies { get; set; }
        public virtual DbSet<GEmailConfiguration> GEmailConfigurations { get; set; }
        public virtual DbSet<GErrorLog> GErrorLogs { get; set; }
        public virtual DbSet<GKeyValue> GKeyValues { get; set; }
        public virtual DbSet<GMenu> GMenus { get; set; }
        public virtual DbSet<GSecurityQuestion> GSecurityQuestions { get; set; }
        public virtual DbSet<GUserActivityLog> GUserActivityLogs { get; set; }
        public virtual DbSet<LAccrual> LAccruals { get; set; }
        public virtual DbSet<LAttachment> LAttachments { get; set; }
        public virtual DbSet<LAudit> LAudits { get; set; }
        public virtual DbSet<LBatch> LBatches { get; set; }
        public virtual DbSet<LBatchFile> LBatchFiles { get; set; }
        public virtual DbSet<LCalc> LCalcs { get; set; }
        public virtual DbSet<LChangeRequest> LChangeRequests { get; set; }
        public virtual DbSet<LClaim> LClaims { get; set; }
        public virtual DbSet<LCommissionPeriod> LCommissionPeriods { get; set; }
        public virtual DbSet<LCompanySpecificColumn> LCompanySpecificColumns { get; set; }
        public virtual DbSet<LCompanySpecificRawDataColumn> LCompanySpecificRawDataColumns { get; set; }
        public virtual DbSet<LDelegation> LDelegations { get; set; }
        public virtual DbSet<LEmailBucket> LEmailBuckets { get; set; }
        public virtual DbSet<LEmailTemplate> LEmailTemplates { get; set; }
        public virtual DbSet<LPay> LPays { get; set; }
        public virtual DbSet<LPayeeAuditLog> LPayeeAuditLogs { get; set; }
        public virtual DbSet<LPayeeParent> LPayeeParents { get; set; }
        public virtual DbSet<LPayee> LPayees { get; set; }
        public virtual DbSet<LPortfolio> LPortfolios { get; set; }
        public virtual DbSet<LRawData> LRawDatas { get; set; }
        public virtual DbSet<LRawDataTable> LRawDataTables { get; set; }
        public virtual DbSet<LRefFile> LRefFiles { get; set; }
        public virtual DbSet<LRefFileType> LRefFileTypes { get; set; }
        public virtual DbSet<LScheme> LSchemes { get; set; }
        public virtual DbSet<LSupportingDocument> LSupportingDocuments { get; set; }
        public virtual DbSet<LSupportRespons> LSupportResponses { get; set; }
        public virtual DbSet<LSupportTicketAssignment> LSupportTicketAssignments { get; set; }
        public virtual DbSet<LSupportTicket> LSupportTickets { get; set; }
        public virtual DbSet<LUser> LUsers { get; set; }
        public virtual DbSet<LWorkFlowActionItem> LWorkFlowActionItems { get; set; }
        public virtual DbSet<LWorkFlowActionParameter> LWorkFlowActionParameters { get; set; }
        public virtual DbSet<LWorkFlowConfig> LWorkFlowConfigs { get; set; }
        public virtual DbSet<LWorkflowGridColumn> LWorkflowGridColumns { get; set; }
        public virtual DbSet<MAspnetRolesGAuthorizableObject> MAspnetRolesGAuthorizableObjects { get; set; }
        public virtual DbSet<MAspnetUsersGSecurityQuestion> MAspnetUsersGSecurityQuestions { get; set; }
        public virtual DbSet<MEntityPortfolio> MEntityPortfolios { get; set; }
        public virtual DbSet<MGMenusAspnetRole> MGMenusAspnetRoles { get; set; }
        public virtual DbSet<RActivityType> RActivityTypes { get; set; }
        public virtual DbSet<RBrand> RBrands { get; set; }
        public virtual DbSet<RChannel> RChannels { get; set; }
        public virtual DbSet<RCommissionType> RCommissionTypes { get; set; }
        public virtual DbSet<RDeviceType> RDeviceTypes { get; set; }
        public virtual DbSet<RProductCode> RProductCodes { get; set; }
        public virtual DbSet<RRejectionReason> RRejectionReasons { get; set; }
        public virtual DbSet<RSubChannel> RSubChannels { get; set; }
        public virtual DbSet<RSupportCategory> RSupportCategories { get; set; }
        public virtual DbSet<RSupportQuickTicket> RSupportQuickTickets { get; set; }
        public virtual DbSet<RsupportTeam> RsupportTeams { get; set; }
        public virtual DbSet<RWorkFlow> RWorkFlows { get; set; }
    
        [DbFunction("VodafoneSOSLiteEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[VodafoneSOSLiteEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<GetCalcReport_Result> GetCalcReport(string source, string primaryChannel, Nullable<int> pageSize, Nullable<int> pageNumber, string payeeList, string minSubscriberNumber, string maxSubscriberNumber, string minBAN, string maxBAN, string minIMEI, string maxIMEI, string activityType, string productCode, string commissionType, Nullable<int> minContractDuration, Nullable<int> maxContractDuration, Nullable<decimal> minCommissionAmount, Nullable<decimal> maxCommissionAmount, string companyCode, Nullable<System.DateTime> minOrderDate, Nullable<System.DateTime> maxOrderDate, Nullable<System.DateTime> minConnectionDate, Nullable<System.DateTime> maxConnectionDate, Nullable<System.DateTime> minTerminationDate, Nullable<System.DateTime> maxTerminationDate)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var primaryChannelParameter = primaryChannel != null ?
                new ObjectParameter("PrimaryChannel", primaryChannel) :
                new ObjectParameter("PrimaryChannel", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var payeeListParameter = payeeList != null ?
                new ObjectParameter("PayeeList", payeeList) :
                new ObjectParameter("PayeeList", typeof(string));
    
            var minSubscriberNumberParameter = minSubscriberNumber != null ?
                new ObjectParameter("MinSubscriberNumber", minSubscriberNumber) :
                new ObjectParameter("MinSubscriberNumber", typeof(string));
    
            var maxSubscriberNumberParameter = maxSubscriberNumber != null ?
                new ObjectParameter("MaxSubscriberNumber", maxSubscriberNumber) :
                new ObjectParameter("MaxSubscriberNumber", typeof(string));
    
            var minBANParameter = minBAN != null ?
                new ObjectParameter("MinBAN", minBAN) :
                new ObjectParameter("MinBAN", typeof(string));
    
            var maxBANParameter = maxBAN != null ?
                new ObjectParameter("MaxBAN", maxBAN) :
                new ObjectParameter("MaxBAN", typeof(string));
    
            var minIMEIParameter = minIMEI != null ?
                new ObjectParameter("MinIMEI", minIMEI) :
                new ObjectParameter("MinIMEI", typeof(string));
    
            var maxIMEIParameter = maxIMEI != null ?
                new ObjectParameter("MaxIMEI", maxIMEI) :
                new ObjectParameter("MaxIMEI", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var commissionTypeParameter = commissionType != null ?
                new ObjectParameter("CommissionType", commissionType) :
                new ObjectParameter("CommissionType", typeof(string));
    
            var minContractDurationParameter = minContractDuration.HasValue ?
                new ObjectParameter("MinContractDuration", minContractDuration) :
                new ObjectParameter("MinContractDuration", typeof(int));
    
            var maxContractDurationParameter = maxContractDuration.HasValue ?
                new ObjectParameter("MaxContractDuration", maxContractDuration) :
                new ObjectParameter("MaxContractDuration", typeof(int));
    
            var minCommissionAmountParameter = minCommissionAmount.HasValue ?
                new ObjectParameter("MinCommissionAmount", minCommissionAmount) :
                new ObjectParameter("MinCommissionAmount", typeof(decimal));
    
            var maxCommissionAmountParameter = maxCommissionAmount.HasValue ?
                new ObjectParameter("MaxCommissionAmount", maxCommissionAmount) :
                new ObjectParameter("MaxCommissionAmount", typeof(decimal));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var minOrderDateParameter = minOrderDate.HasValue ?
                new ObjectParameter("MinOrderDate", minOrderDate) :
                new ObjectParameter("MinOrderDate", typeof(System.DateTime));
    
            var maxOrderDateParameter = maxOrderDate.HasValue ?
                new ObjectParameter("MaxOrderDate", maxOrderDate) :
                new ObjectParameter("MaxOrderDate", typeof(System.DateTime));
    
            var minConnectionDateParameter = minConnectionDate.HasValue ?
                new ObjectParameter("MinConnectionDate", minConnectionDate) :
                new ObjectParameter("MinConnectionDate", typeof(System.DateTime));
    
            var maxConnectionDateParameter = maxConnectionDate.HasValue ?
                new ObjectParameter("MaxConnectionDate", maxConnectionDate) :
                new ObjectParameter("MaxConnectionDate", typeof(System.DateTime));
    
            var minTerminationDateParameter = minTerminationDate.HasValue ?
                new ObjectParameter("MinTerminationDate", minTerminationDate) :
                new ObjectParameter("MinTerminationDate", typeof(System.DateTime));
    
            var maxTerminationDateParameter = maxTerminationDate.HasValue ?
                new ObjectParameter("MaxTerminationDate", maxTerminationDate) :
                new ObjectParameter("MaxTerminationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCalcReport_Result>("GetCalcReport", sourceParameter, primaryChannelParameter, pageSizeParameter, pageNumberParameter, payeeListParameter, minSubscriberNumberParameter, maxSubscriberNumberParameter, minBANParameter, maxBANParameter, minIMEIParameter, maxIMEIParameter, activityTypeParameter, productCodeParameter, commissionTypeParameter, minContractDurationParameter, maxContractDurationParameter, minCommissionAmountParameter, maxCommissionAmountParameter, companyCodeParameter, minOrderDateParameter, maxOrderDateParameter, minConnectionDateParameter, maxConnectionDateParameter, minTerminationDateParameter, maxTerminationDateParameter);
        }
    
        public virtual ObjectResult<SpGetColumnNamesForXSchemaTable_Result> SpGetColumnNamesForXSchemaTable(Nullable<int> lrawDataTableId)
        {
            var lrawDataTableIdParameter = lrawDataTableId.HasValue ?
                new ObjectParameter("LrawDataTableId", lrawDataTableId) :
                new ObjectParameter("LrawDataTableId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetColumnNamesForXSchemaTable_Result>("SpGetColumnNamesForXSchemaTable", lrawDataTableIdParameter);
        }
    
        public virtual ObjectResult<string> SPGetUserForAllocation(string baseTable, string wFType, Nullable<int> transactionID, Nullable<int> wFOrdinal, Nullable<int> companyID, ObjectParameter wFCurrentOwnerID)
        {
            var baseTableParameter = baseTable != null ?
                new ObjectParameter("BaseTable", baseTable) :
                new ObjectParameter("BaseTable", typeof(string));
    
            var wFTypeParameter = wFType != null ?
                new ObjectParameter("WFType", wFType) :
                new ObjectParameter("WFType", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var wFOrdinalParameter = wFOrdinal.HasValue ?
                new ObjectParameter("WFOrdinal", wFOrdinal) :
                new ObjectParameter("WFOrdinal", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPGetUserForAllocation", baseTableParameter, wFTypeParameter, transactionIDParameter, wFOrdinalParameter, companyIDParameter, wFCurrentOwnerID);
        }
    
        public virtual int SpLogEmail(string recipientList, string cCList, string bCCList, string replyToList, string subject, string body, Nullable<bool> isHTML, string emailType, string priority, string attachmentList, string status, string comments, string createdById, string updatedById, string senderAccountName)
        {
            var recipientListParameter = recipientList != null ?
                new ObjectParameter("RecipientList", recipientList) :
                new ObjectParameter("RecipientList", typeof(string));
    
            var cCListParameter = cCList != null ?
                new ObjectParameter("CCList", cCList) :
                new ObjectParameter("CCList", typeof(string));
    
            var bCCListParameter = bCCList != null ?
                new ObjectParameter("BCCList", bCCList) :
                new ObjectParameter("BCCList", typeof(string));
    
            var replyToListParameter = replyToList != null ?
                new ObjectParameter("ReplyToList", replyToList) :
                new ObjectParameter("ReplyToList", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var isHTMLParameter = isHTML.HasValue ?
                new ObjectParameter("IsHTML", isHTML) :
                new ObjectParameter("IsHTML", typeof(bool));
    
            var emailTypeParameter = emailType != null ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var attachmentListParameter = attachmentList != null ?
                new ObjectParameter("AttachmentList", attachmentList) :
                new ObjectParameter("AttachmentList", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByIdParameter = createdById != null ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(string));
    
            var updatedByIdParameter = updatedById != null ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(string));
    
            var senderAccountNameParameter = senderAccountName != null ?
                new ObjectParameter("SenderAccountName", senderAccountName) :
                new ObjectParameter("SenderAccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogEmail", recipientListParameter, cCListParameter, bCCListParameter, replyToListParameter, subjectParameter, bodyParameter, isHTMLParameter, emailTypeParameter, priorityParameter, attachmentListParameter, statusParameter, commentsParameter, createdByIdParameter, updatedByIdParameter, senderAccountNameParameter);
        }
    
        public virtual int SpLogError(string sourceProject, string controller, string method, string stackTrace, string userName, string errorType, string errorDescription, string resolution, string errorOwner, string fieldName, Nullable<int> sOSBatchNumber)
        {
            var sourceProjectParameter = sourceProject != null ?
                new ObjectParameter("SourceProject", sourceProject) :
                new ObjectParameter("SourceProject", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorDescriptionParameter = errorDescription != null ?
                new ObjectParameter("ErrorDescription", errorDescription) :
                new ObjectParameter("ErrorDescription", typeof(string));
    
            var resolutionParameter = resolution != null ?
                new ObjectParameter("Resolution", resolution) :
                new ObjectParameter("Resolution", typeof(string));
    
            var errorOwnerParameter = errorOwner != null ?
                new ObjectParameter("ErrorOwner", errorOwner) :
                new ObjectParameter("ErrorOwner", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var sOSBatchNumberParameter = sOSBatchNumber.HasValue ?
                new ObjectParameter("SOSBatchNumber", sOSBatchNumber) :
                new ObjectParameter("SOSBatchNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogError", sourceProjectParameter, controllerParameter, methodParameter, stackTraceParameter, userNameParameter, errorTypeParameter, errorDescriptionParameter, resolutionParameter, errorOwnerParameter, fieldNameParameter, sOSBatchNumberParameter);
        }
    
        public virtual ObjectResult<string> SPUpdateActionStatus(string action, string workFlowName, Nullable<int> transactionId, Nullable<int> companyId, string loggedInUserId, string comments, string currentRoleId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var workFlowNameParameter = workFlowName != null ?
                new ObjectParameter("WorkFlowName", workFlowName) :
                new ObjectParameter("WorkFlowName", typeof(string));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId != null ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var currentRoleIdParameter = currentRoleId != null ?
                new ObjectParameter("CurrentRoleId", currentRoleId) :
                new ObjectParameter("CurrentRoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPUpdateActionStatus", actionParameter, workFlowNameParameter, transactionIdParameter, companyIdParameter, loggedInUserIdParameter, commentsParameter, currentRoleIdParameter);
        }
    
        public virtual int SpUpdateChangeRequestData(string changedIdList, string statusName, string comments, string updatedBy, Nullable<System.DateTime> updatedDateTimeUTC)
        {
            var changedIdListParameter = changedIdList != null ?
                new ObjectParameter("ChangedIdList", changedIdList) :
                new ObjectParameter("ChangedIdList", typeof(string));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var updatedDateTimeUTCParameter = updatedDateTimeUTC.HasValue ?
                new ObjectParameter("UpdatedDateTimeUTC", updatedDateTimeUTC) :
                new ObjectParameter("UpdatedDateTimeUTC", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateChangeRequestData", changedIdListParameter, statusNameParameter, commentsParameter, updatedByParameter, updatedDateTimeUTCParameter);
        }
    
        public virtual int SpUpdateClaimsData(string claimsList, string statusName, Nullable<System.DateTime> allocationDate, string allocatedTo, string allocatedBy, Nullable<System.DateTime> approvalDate, string approvedBy, Nullable<int> rejectionReasonId, Nullable<System.DateTime> lastReclaimDate, Nullable<bool> isReclaim, string comments)
        {
            var claimsListParameter = claimsList != null ?
                new ObjectParameter("ClaimsList", claimsList) :
                new ObjectParameter("ClaimsList", typeof(string));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var allocationDateParameter = allocationDate.HasValue ?
                new ObjectParameter("AllocationDate", allocationDate) :
                new ObjectParameter("AllocationDate", typeof(System.DateTime));
    
            var allocatedToParameter = allocatedTo != null ?
                new ObjectParameter("AllocatedTo", allocatedTo) :
                new ObjectParameter("AllocatedTo", typeof(string));
    
            var allocatedByParameter = allocatedBy != null ?
                new ObjectParameter("AllocatedBy", allocatedBy) :
                new ObjectParameter("AllocatedBy", typeof(string));
    
            var approvalDateParameter = approvalDate.HasValue ?
                new ObjectParameter("ApprovalDate", approvalDate) :
                new ObjectParameter("ApprovalDate", typeof(System.DateTime));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var rejectionReasonIdParameter = rejectionReasonId.HasValue ?
                new ObjectParameter("RejectionReasonId", rejectionReasonId) :
                new ObjectParameter("RejectionReasonId", typeof(int));
    
            var lastReclaimDateParameter = lastReclaimDate.HasValue ?
                new ObjectParameter("LastReclaimDate", lastReclaimDate) :
                new ObjectParameter("LastReclaimDate", typeof(System.DateTime));
    
            var isReclaimParameter = isReclaim.HasValue ?
                new ObjectParameter("IsReclaim", isReclaim) :
                new ObjectParameter("IsReclaim", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateClaimsData", claimsListParameter, statusNameParameter, allocationDateParameter, allocatedToParameter, allocatedByParameter, approvalDateParameter, approvedByParameter, rejectionReasonIdParameter, lastReclaimDateParameter, isReclaimParameter, commentsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPWfIsLastOrdinal(string baseTableName, Nullable<int> workflowId, Nullable<int> transactionID, Nullable<int> companyID, ObjectParameter isMaxOrdinal)
        {
            var baseTableNameParameter = baseTableName != null ?
                new ObjectParameter("BaseTableName", baseTableName) :
                new ObjectParameter("BaseTableName", typeof(string));
    
            var workflowIdParameter = workflowId.HasValue ?
                new ObjectParameter("WorkflowId", workflowId) :
                new ObjectParameter("WorkflowId", typeof(int));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPWfIsLastOrdinal", baseTableNameParameter, workflowIdParameter, transactionIDParameter, companyIDParameter, isMaxOrdinal);
        }
    }
}
