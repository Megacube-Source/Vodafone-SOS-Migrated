@model Vodafone_SOS_WebApp.ViewModels.LReadyToPayViewModel
@{
    ViewBag.Title = "Create Payment Batch";
}

<h2>Create Payment Batch</h2>

<script type="text/javascript">
    var arr = "";
    var portfoliovaluestopass = "";
    var IsSaved = "False";

    $(document).ready(function () {
        var ClacGridCount = 0;
        var MaGridCount = 0;
        var ClaimsGridCount = 0;
        
        fnLoadPortfolioGrid();
        $('#jqxTabs').jqxTabs({ keyboardNavigation: false, height: 'auto' });
        $('#jqxgrid').on('rowselect', function (event) {

            setTimeout(function () { FnSavePortfolio(); }, 3000);

            return false;
        });
        $('#jqxgrid').on('rowunselect', function (event) {
            setTimeout(function () { FnSavePortfolio(); }, 3000);
            return false;
        });
        $('#jqxTabs').on('tabclick', function (event) {
            if (IsSaved == "True") {
                var item = event.args.item;
                if (item == 1) {
                    FnLoadCALC(portfoliovaluestopass);
                }
                if (item == 2) {
                    FnLoadMA(portfoliovaluestopass);
                }
                if (item == 3) {
                    FnLoadCLAIMS(portfoliovaluestopass);
                }
            } else {
                alert("Kindly select the portfolios first");
                    location.reload();
            }
        });
        $("input[name$='viewformat']").click(function () {
            var selectedVal = $(this).val();
            //if (portfoliovaluestopass == "") {
            //    alert("Kindly select the Portfolio first.")
            //    // $('#GridView').prop('checked', true);
            //    location.reload();
            //} else {
                if (selectedVal == "GridView") {
                    $("#jqxClaimsGrid").show();
                    $("#jqxCSVView").hide();
                    //  FnLoadCLAIMS(portfoliovaluestopass);

                } else {
                    $("#jqxClaimsGrid").hide();
                    $("#jqxCSVView").show();
                }
           // }
            //$("div.desc").hide();
            //$("#Cars" + test).show();
        });
    });
    function FnSavePortfolio() {
        var xx = "";
        portfoliovaluestopass = 0;
        xx = $('#jqxgrid').jqxGrid('getselectedrowindexes');
        PortfolioArray = [];
        PortfolioNames = [];
        PortfolioArray[0] = "";
        PortfolioNames[0] = "";
        for (var i = 1; i <= xx.length; i++) {
            var rowdata = $('#jqxgrid').jqxGrid('getrowdata', xx[i - 1]);//as i is starting from 1 and not zero
            PortfolioArray[i - 1] = rowdata.Id;
            PortfolioNames[i - 1] = rowdata.RcPrimaryChannel + '-' + rowdata.LpBusinessUnit + '-' + rowdata.RcName;

        }
        var CommaSeperatedString = PortfolioArray.join(',');
        //alert(PortfolioArray);
        var portnames = PortfolioNames.join(',');
        //$('#GridView').prop('checked', true);
        //$("#jqxClaimsGrid").show();
        //$("#jqxCSVView").hide();

        document.getElementById('strSelectedPortfolios').value = CommaSeperatedString;
        portfoliovaluestopass = CommaSeperatedString;
        IsSaved = "True";

        fnGetClaimsCounts(CommaSeperatedString);
        fnGetMACounts(CommaSeperatedString);
        fnGetCalcCounts(CommaSeperatedString);
        //FnLoadCALC(CommaSeperatedString);

        return;
    }
    //Portfolio grid
    function fnLoadPortfolioGrid() {
        var Portfoliosource = {
            dataType: "json",
            dataFields: [
                { name: 'Id', type: 'string' },
                { name: 'RcPrimaryChannel', type: 'string' },
                { name: 'LpBusinessUnit', type: 'string' },
                { name: 'RcName', type: 'string' }

            ],
            id: "Id",
            cache: false,
            url: "/LReadyToPay/GetPortfolios"

        };
        var PortfoliodataAdapter = new $.jqx.dataAdapter(Portfoliosource);
        $('#jqxgrid').jqxGrid({
            source: PortfoliodataAdapter,
            width: '100%',
            height: 300,
            // autoheight: true,
            theme: 'bootstrap',
            sortable: true,
            columnsresize: true,
            columnsreorder: true,
            altrows: true,
            pageable: false,
            filterable: true,
            enablebrowserselection: true,//--RS on 26th feb 2019, to make field copied
            showstatusbar: false,
            selectionmode: 'checkbox',
            ready: function () {

            },
            columns: [
                { text: 'Primary Channel', datafield: 'RcPrimaryChannel' },
                { text: 'Business Unit', datafield: 'LpBusinessUnit' },
                { text: 'Channel', datafield: 'RcName' }

            ]
        });
    }
    //Being used for save button
    function SaveSelection() {

        var selected = "false";
        var SelectedValues = "";

        if ((document.getElementById('PeriodName').value == "") || (document.getElementById('PeriodName').value == undefined)) {
            alert('Kindly select PeriodName');
            return false;
        }

        if ((document.getElementById('PaymentBatchName').value == "") || (document.getElementById('PaymentBatchName').value == undefined)) {
            alert('Kindly enter  Payment Batch Name');
            return false;
        }

        var xx = $('#jqxCalcGrid').jqxGrid('getselectedrowindexes');
        if (xx != undefined) {
            if (ClacGridCount != $('#jqxCalcGrid').jqxGrid('getselectedrowindexes').length) {
                for (var i = 1; i <= xx.length; i++) {
                    var rowdata = $('#jqxCalcGrid').jqxGrid('getrowdata', xx[i - 1]);//as i is starting from 1 and not zero
                    SelectedValues = SelectedValues + rowdata.Identifier + ",Calc|";
                }
            }
            else {
                $.ajax({
                    data: { iRTPID: "0", blnIsBatchList: "False", strType: "Calc", strRTPStatus: "", strPortfolios: portfoliovaluestopass, pagesize: ClacGridCount },
                    url: "/LReadyToPay/GetBatchesForAddPaymentBatch",
                    dataType: "json",
                    type: "POST",
                    async: false,
                    success: function (data) {
                        $.each(data, function (idx, data1) {
                            SelectedValues = SelectedValues + data1.Identifier + ",Calc|";
                        });
                    },
                    error: function (error) {
                    }
                });


            }
        }

        //--> Functionality for SelectAll on ManualGrid.
        var rowsManual = $('#jqxManualGrid').jqxGrid('getselectedrowindexes');
        if (rowsManual != undefined) {
            if (MaGridCount != $('#jqxManualGrid').jqxGrid('getselectedrowindexes').length) {
                for (var i = 1; i <= rowsManual.length; i++) {
                    var rowdata = $('#jqxManualGrid').jqxGrid('getrowdata', rowsManual[i - 1]);//as i is starting from 1 and not zero
                    SelectedValues = SelectedValues + rowdata.Identifier + ",ManualAdjustment|";
                    console.log(SelectedValues);
                }
            }
            else {
                $.ajax({
                    data: { iRTPID: "0", blnIsBatchList: "False", strType: "ManualAdjustment", strRTPStatus: "", strPortfolios: portfoliovaluestopass, pagesize: MaGridCount },
                    url: "/LReadyToPay/GetBatchesForAddPaymentBatch",
                    dataType: "json",
                    type: "POST",
                    async: false,
                    success: function (data) {
                        $.each(data, function (idx, data1) {
                            SelectedValues = SelectedValues + data1.Identifier + ",ManualAdjustment|";
                        });
                    },
                    error: function (error) {
                    }
                });


            }
        }

        var radioValue = $("input[name='viewformat']:checked").val();

        if (radioValue == "GridView") {
            //--> Functionality for SelectAll on ClaimsGrid.
            var rowsclaims = $('#jqxClaimsGrid').jqxGrid('getselectedrowindexes');
            if (rowsclaims != undefined) {
                if (ClaimsGridCount != $('#jqxClaimsGrid').jqxGrid('getselectedrowindexes').length) {
                    for (var i = 1; i <= rowsclaims.length; i++) {
                        var rowdata = $('#jqxClaimsGrid').jqxGrid('getrowdata', rowsclaims[i - 1]);//as i is starting from 1 and not zero
                        SelectedValues = SelectedValues + rowdata.Identifier + ",Claims|";
                    }
                }
                else {
                    $.ajax({
                        data: { iRTPID: "0", blnIsBatchList: "False", strType: "Claims", strRTPStatus: "", strPortfolios: portfoliovaluestopass, pagesize: ClaimsGridCount },
                        url: "/LReadyToPay/GetBatchesForAddPaymentBatch",
                        dataType: "json",
                        type: "POST",
                        async: false,
                        success: function (data) {
                            $.each(data, function (idx, data1) {
                                SelectedValues = SelectedValues + data1.Identifier + ",Claims|";
                            });
                        },
                        error: function (error) {
                        }
                    });


                }
            }
        } else {
            if( $("#txtCSV").val() != "")
            {
                var str = $("#txtCSV").val();
                str = str.replace(/\n/g, '')
                var temp = new Array();
                // this will return an array with strings "1", "2", etc.
                temp = str.split(",");
                for (var i = 0; i < temp.length; i++) {
                    if ($.isNumeric(temp[i]) == false) {
                        alert("These Claim Numbers should be numeric only.");
                        return false;
                    }
                }
                var ClaimsNotFound = "";
                var notMatched = false;
                $.ajax({
                    url: "/LReadyToPay/GetClaimValidate",
                    type: "GET",
                    cache: false,
                    async: false,
                    data: { Type: "Claims", CSVData: str, strPortfolios: portfoliovaluestopass },
                    success: function (data) {
                        $.each(data, function (index, value) {
                            if (value.ID == 0) {
                                notMatched = true;
                                if (ClaimsNotFound == "") {
                                    ClaimsNotFound = value.ClaimNumber + ',';
                                } else {
                                    ClaimsNotFound = ClaimsNotFound + value.ClaimNumber + ',';
                                }

                            } else {
                                SelectedValues = SelectedValues + value.ID + ",Claims|";
                            }
                        });
                        //var data2 = JSON.parse(data);
                        
                    }
                ,
                    error: function (error) {
                    }

                });
            } 
        }
       

        if (notMatched == true) {
            alert("These claim numbers are not available for payment: " + ClaimsNotFound + ".");
            return false;
        } 


       if ((SelectedValues == "") || (SelectedValues == undefined)) {
            alert('Select atleast one Calculation/Manual Adjustment/Claims before creating payment batch.');
            return false;
        }

       
        document.getElementById('strKeyValues').value = SelectedValues;
        document.getElementById('strSaveStatus').value = "Submitted";

        if (items.length > 0) {

            var sucess = $("#frm").validate({})
            if ($('#frm').valid()) {
                document.getElementById('frm').submit()
            }
        }
    }
    //For Save as draft method
    function SaveAsDraft() {

        if ((document.getElementById('PeriodName').value == "") || (document.getElementById('PeriodName').value == undefined)) {
            alert('Kindly select PeriodName');
            return false;
        }

        if ((document.getElementById('PaymentBatchName').value == "") || (document.getElementById('PaymentBatchName').value == undefined)) {
            alert('Kindly enter  Payment Batch Name');
            return false;
        }

        var rows = $('#jqxCalcGrid').jqxGrid('getrows');
        var selected = "false";
        var SelectedValues = "";

        var xx = $('#jqxCalcGrid').jqxGrid('getselectedrowindexes');
        if (xx != undefined) {
            if (ClacGridCount != $('#jqxCalcGrid').jqxGrid('getselectedrowindexes').length) {
                for (var i = 1; i <= xx.length; i++) {
                    var rowdata = $('#jqxCalcGrid').jqxGrid('getrowdata', xx[i - 1]);//as i is starting from 1 and not zero
                    SelectedValues = SelectedValues + rowdata.Identifier + ",Calc|";
                }
            }
            else {
                $.ajax({
                    data: { iRTPID: "0", blnIsBatchList: "False", strType: "Calc", strRTPStatus: "", strPortfolios: portfoliovaluestopass, pagesize: ClacGridCount },
                    url: "/LReadyToPay/GetBatchesForAddPaymentBatch",
                    dataType: "json",
                    type: "POST",
                    async: false,
                    success: function (data) {
                        $.each(data, function (idx, data1) {
                            SelectedValues = SelectedValues + data1.Identifier + ",Calc|";
                        });
                    },
                    error: function (error) {
                    }
                });


            }
        }

        //--> Functionality for SelectAll on ManualGrid.
        var rowsManual = $('#jqxManualGrid').jqxGrid('getselectedrowindexes');
        if (rowsManual != undefined) {
            if (MaGridCount != $('#jqxManualGrid').jqxGrid('getselectedrowindexes').length) {
                for (var i = 1; i <= rowsManual.length; i++) {
                    var rowdata = $('#jqxManualGrid').jqxGrid('getrowdata', rowsManual[i - 1]);//as i is starting from 1 and not zero
                    SelectedValues = SelectedValues + rowdata.Identifier + ",ManualAdjustment|";
                    console.log(SelectedValues);
                }
            }
            else {
                $.ajax({
                    data: { iRTPID: "0", blnIsBatchList: "False", strType: "ManualAdjustment", strRTPStatus: "", strPortfolios: portfoliovaluestopass, pagesize: MaGridCount },
                    url: "/LReadyToPay/GetBatchesForAddPaymentBatch",
                    dataType: "json",
                    type: "POST",
                    async: false,
                    success: function (data) {
                        $.each(data, function (idx, data1) {
                            SelectedValues = SelectedValues + data1.Identifier + ",ManualAdjustment|";
                        });
                    },
                    error: function (error) {
                    }
                });


            }
        }

        //--> Functionality for SelectAll on ClaimsGrid.
        //var rowsclaims = $('#jqxClaimsGrid').jqxGrid('getselectedrowindexes');
        //if (rowsclaims != undefined) {
        //    if (ClaimsGridCount != $('#jqxClaimsGrid').jqxGrid('getselectedrowindexes').length) {
        //        for (var i = 1; i <= rowsclaims.length; i++) {
        //            var rowdata = $('#jqxClaimsGrid').jqxGrid('getrowdata', rowsclaims[i - 1]);//as i is starting from 1 and not zero
        //            SelectedValues = SelectedValues + rowdata.Identifier + ",Claims|";
        //            console.log(SelectedValues);
        //        }
        //    }
        //    else {
        //        $.ajax({
        //            data: { iRTPID: "0", blnIsBatchList: "False", strType: "Claims", strRTPStatus: "", strPortfolios: portfoliovaluestopass, pagesize: ClaimsGridCount },
        //            url: "/LReadyToPay/GetBatchesForAddPaymentBatch",
        //            dataType: "json",
        //            type: "POST",
        //            async: false,
        //            success: function (data) {
        //                $.each(data, function (idx, data1) {
        //                    SelectedValues = SelectedValues + data1.Identifier + ",Claims|";
        //                    console.log(SelectedValues);
        //                });
        //            },
        //            error: function (error) {
        //            }
        //        });


        //    }
        //}
        var radioValue = $("input[name='viewformat']:checked").val();
        if (radioValue == "GridView") {
            //--> Functionality for SelectAll on ClaimsGrid.
            var rowsclaims = $('#jqxClaimsGrid').jqxGrid('getselectedrowindexes');
            if (rowsclaims != undefined) {
                if (ClaimsGridCount != $('#jqxClaimsGrid').jqxGrid('getselectedrowindexes').length) {
                    for (var i = 1; i <= rowsclaims.length; i++) {
                        var rowdata = $('#jqxClaimsGrid').jqxGrid('getrowdata', rowsclaims[i - 1]);//as i is starting from 1 and not zero
                        SelectedValues = SelectedValues + rowdata.Identifier + ",Claims|";
                    }
                }
                else {
                    $.ajax({
                        data: { iRTPID: "0", blnIsBatchList: "False", strType: "Claims", strRTPStatus: "", strPortfolios: portfoliovaluestopass, pagesize: ClaimsGridCount },
                        url: "/LReadyToPay/GetBatchesForAddPaymentBatch",
                        dataType: "json",
                        type: "POST",
                        async: false,
                        success: function (data) {
                            $.each(data, function (idx, data1) {
                                SelectedValues = SelectedValues + data1.Identifier + ",Claims|";
                            });
                        },
                        error: function (error) {
                        }
                    });


                }
            }
        } else {
            if ($("#txtCSV").val() != "") {
                var str = $("#txtCSV").val();
                str = str.replace(/\n/g, '')
                var temp = new Array();
                // this will return an array with strings "1", "2", etc.
                temp = str.split(",");
                for (var i = 0; i < temp.length; i++) {
                    if ($.isNumeric(temp[i]) == false) {
                        alert("These Claim Numbers should be numeric only.");
                        return false;
                    }
                }
                var ClaimsNotFound = "";
                var notMatched = false;
                $.ajax({
                    url: "/LReadyToPay/GetClaimValidate",
                    type: "GET",
                    cache: false,
                    async: false,
                    data: { Type: "Claims", CSVData: str, strPortfolios: portfoliovaluestopass },
                    success: function (data) {
                        $.each(data, function (index, value) {
                            if (value.ID == 0) {
                                notMatched = true;
                                if (ClaimsNotFound == "") {
                                    ClaimsNotFound = value.ClaimNumber + ',';
                                } else {
                                    ClaimsNotFound = ClaimsNotFound + value.ClaimNumber + ',';
                                }

                            } else {
                                SelectedValues = SelectedValues + value.ID + ",Claims|";
                            }
                        });
                        //var data2 = JSON.parse(data);

                    }
                    ,
                    error: function (error) {
                    }

                });
            }
        }
        if (notMatched == true) {
            alert("These claim numbers are not available for payment : " + ClaimsNotFound + ".");
            return false;
        }
        if ((SelectedValues == "") || (SelectedValues == undefined)) {
            alert('Select atleast one Calculation/Manual Adjustment/Claims before creating payment batch.');
            return false;
        }

       
        document.getElementById('strKeyValues').value = SelectedValues;
        document.getElementById('strSaveStatus').value = "Draft";

        if (items.length > 0) {

            var sucess = $("#frm").validate({})
            if ($('#frm').valid()) {
                document.getElementById('frm').submit()
            }
        }
    }
    //This function will select rows as per check box selection
    function FnSelectRows() {
        var GridRows = $('#jqxgrid').jqxGrid('getrows')

        for (var i = 0; i < GridRows.length; ++i) {
            $('#jqxgrid').jqxGrid('unselectrow', i);
            var PrimaryChannel = GridRows[i].RcPrimaryChannel.toLowerCase();
            var BusinessUnit = GridRows[i].LpBusinessUnit.toLowerCase();
            if (PrimaryChannel == "indirect" && document.getElementById("InDirect").checked) {
                // Number. The row's bound index.
                $('#jqxgrid').jqxGrid('selectrow', i);


            }
            else if (PrimaryChannel == "direct" && document.getElementById("Direct").checked) {
                // Number. The row's bound index.
                $('#jqxgrid').jqxGrid('selectrow', i);
            }
            //Check for business unit
            if (BusinessUnit == "cbu" && document.getElementById("CBU").checked) {
                // Number. The row's bound index.
                $('#jqxgrid').jqxGrid('selectrow', i);
            }
            else if (BusinessUnit == "ebu" && document.getElementById("EBU").checked) {
                // Number. The row's bound index.
                $('#jqxgrid').jqxGrid('selectrow', i);
            }
        }

    }

    function fnGetCalcCounts(portfolios) {

        $.ajax({
            dataType: "json",
            dataFields: [
                { name: 'Identifier', type: 'string' },
                { name: 'Select', type: 'bool' },
                { name: 'BatchNumber', type: 'int' },
                { name: 'BatchName', type: 'string' }
            ],
            id: "Identifier",
            url: "/LReadyToPay/GetCountsBatchesForNew",
            type: "GET",
            data: { iRTPID: "0", blnIsBatchList: "False", strType: "Calc", strRTPStatus: "", strPortfolios: portfolios },
            success: function (Counts) {
                ClacGridCount = Counts;
                document.getElementById('bCalculations').innerHTML = Counts;

            },
            error: function (reponse) {
            }
        });
    }

    function FnLoadCALC(portfoliosCalc) {

        $.ajax({
            url: "/LReadyToPay/GetCountsBatchesForNew",
            type: "GET",
            cache: false,
            data: { iRTPID: "0", blnIsBatchList: "False", strType: "Calc", strRTPStatus: "", strPortfolios: portfoliosCalc },
            success: function (Counts) {
               // console.log(portfolios + 'line no 207');
        var sourceCalc = {
            dataType: "json",
            dataFields: [
                { name: 'Identifier', type: 'string' },
                { name: 'Select', type: 'bool' },
                { name: 'BatchNumber', type: 'int' },
                { name: 'BatchName', type: 'string' }
            ],
            id: "Identifier",

            data: { iRTPID: "0", blnIsBatchList: "False", strType: "Calc", strRTPStatus: "", strPortfolios: portfoliosCalc },
            url: "/LReadyToPay/GetBatchesForNewTest",

            enctype: 'multipart/form-data',
            cache: false,
            filter: function () {
                $('#jqxCalcGrid').jqxGrid('updatebounddata', 'filter');
                $('#jqxCalcGrid').jqxGrid('clearselection');

            },
            sort: function () {
                $('#jqxCalcGrid').jqxGrid('updatebounddata', 'sort');
                $('#jqxCalcGrid').jqxGrid('clearselection');
            },
            root: 'Rows',
            beforeprocessing: function (data) {
                  sourceCalc.totalrecords = Counts;
            },

        };
        var calcdataAdapter = new $.jqx.dataAdapter(sourceCalc);
        //Check whether the grid is already defined or not and ready for use.
        //var ready = $("#jqxCalcGrid").jqxGrid('ready');
        ////if grid is alreday defined and ready for use, just update the grid. Otherwise, define the grid.
        //if (typeof ready != 'undefined') {
        //    $("#jqxCalcGrid").jqxGrid('updatebounddata');
        //}
        //else {
            $('#jqxCalcGrid').jqxGrid({
                source: calcdataAdapter,
                width: '700',
                theme: 'bootstrap',
                editable: true,
                columnsresize: true,
                columnsreorder: true,
                altrows: true,
                sortable: true,
                autoheight: false,
                autoshowcolumnsmenubutton: false,
                pageable: true,
                pagesize: 200,
                pagesizeoptions: ['100', '200', '500', '1000'],
                filterable: true,
                enablebrowserselection: true,//--RS on 26th feb 2019, to make field copied
                showstatusbar: true,
                selectionmode: 'checkbox',
                virtualmode: true,
                //ready: function () {
                //},
                rendergridrows: function () {
                    return calcdataAdapter.records;
                },
                columns: [
                    //{ text: 'Select', datafield: 'Select', columntype: 'checkbox', width: 100, editable: true },
                    { text: 'Batch Number', datafield: 'BatchNumber', width: 200, editable: false },
                    { text: 'Batch Name', datafield: 'BatchName', width: 400, editable: false }
                ]
            });
       // }
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }


        });

    }

    function fnGetClaimsCounts(portfolios) {
        $.ajax({
            dataType: "json",
            dataFields: [
                { name: 'Identifier', type: 'string' },
                { name: 'Select', type: 'bool' },
                { name: 'ClaimNumber', type: 'int' },
                { name: 'PayeeName', type: 'string' },
                { name: 'PaymentAmount', type: 'decimal' },
                { name: 'RejectedReason', type: 'string' }
            ],
            id: "Identifier",
            url: "/LReadyToPay/GetCountsBatchesForNew",
            type: "GET",
            data: { iRTPID: "0", blnIsBatchList: "False", strType: "Claims", strRTPStatus: "", strPortfolios: portfolios },
            success: function (Counts) {
                document.getElementById('bClaims').innerHTML = Counts;
                ClaimsGridCount = Counts;
            },
            error: function (reponse) {
            }
        });
    }

    function FnLoadCLAIMS(portfolios) {
        $.ajax({
            dataType: "json",
            dataFields: [
                { name: 'Identifier', type: 'string' },
                //{ name: 'Select', type: 'bool' },
                { name: 'ClaimNumber', type: 'int' },
                { name: 'PayeeName', type: 'string' },
                { name: 'PaymentAmount', type: 'decimal' },
                { name: 'RejectedReason', type: 'string' }
            ],
            id: "Identifier",
            url: "/LReadyToPay/GetCountsBatchesForNew",
            type: "GET",
            data: { iRTPID: "0", blnIsBatchList: "False", strType: "Claims", strRTPStatus: "", strPortfolios: portfolios },
            success: function (Counts) {
                var sourceCL = {
                    dataType: "json",
                    dataFields: [
                        { name: 'Identifier', type: 'string' },
                        { name: 'Select', type: 'bool' },
                        { name: 'ClaimNumber', type: 'int' },
                        { name: 'PayeeName', type: 'string' },
                        { name: 'FirstName', type: 'string' },
                        { name: 'PayeeCode', type: 'string' },
                        { name: 'CommissionPeriod', type: 'string' },
                        { name: 'CommissionType', type: 'string' },
                        { name: 'PaymentAmount', type: 'decimal' },
                        { name: 'RejectedReason', type: 'string' }
                    ],
                    id: "Identifier",
                    enctype: 'multipart/form-data',
                    filter: function () {
                        $('#jqxClaimsGrid').jqxGrid('updatebounddata', 'filter');
                        $('#jqxClaimsGrid').jqxGrid('clearselection');

                    },
                    sort: function () {
                        $('#jqxClaimsGrid').jqxGrid('updatebounddata', 'sort');
                        $('#jqxClaimsGrid').jqxGrid('clearselection');
                    },
                    url: "/LReadyToPay/GetBatchesForNewTest",
                    root: 'Rows',
                    beforeprocessing: function (data) {
                        sourceCL.totalrecords = Counts;
                    },
                    data: { iRTPID: "0", blnIsBatchList: "False", strType: "Claims", strRTPStatus: "", strPortfolios: portfolios },
                };
                var CLdataAdapter = new $.jqx.dataAdapter(sourceCL);
                //Check whether the grid is already defined or not and ready for use.
                //var ready = $("#jqxClaimsGrid").jqxGrid('ready');
                ////if grid is alreday defined and ready for use, just update the grid. Otherwise, define the grid.
                //if (typeof ready != 'undefined') {
                //    $("#jqxClaimsGrid").jqxGrid('updatebounddata');
                //}
                //else {
                    $('#jqxClaimsGrid').jqxGrid({
                        source: CLdataAdapter,
                        width: '1150',
                        autoheight: false,
                        theme: 'bootstrap',
                        columnsresize: true,
                        columnsreorder: true,
                        autoshowcolumnsmenubutton: false,
                        altrows: true,
                        sortable: true,
                        pageable: true,
                        pagesize: 200,
                        selectionmode: 'checkbox',
                       pagesizeoptions: ['100', '200', '500', '1000'],
                        filterable: true,
                        enablebrowserselection: true,//--RS on 26th feb 2019, to make field copied
                        //editable: true,
                        showstatusbar: true,
                        virtualmode: true,
                        rendergridrows: function () {
                            return CLdataAdapter.records;
                        },
                        //ready: function () {
                        //},
                        columns: [
                            //{ text: 'Select', datafield: 'Select', columntype: 'checkbox', width: 100, editable: true},
                            { text: 'Claim Number', datafield: 'ClaimNumber', width: '10%', editable: false },
                            { text: 'Payee Name', datafield: 'PayeeName', width: '20%', editable: false },
                            { text: 'First Name', datafield: 'FirstName', width: '20%', editable: false },
                            { text: 'Payee Code', datafield: 'PayeeCode', width: '10%', editable: false },
                            { text: 'Comm Type', datafield: 'CommissionType', width: '10%', editable: false },
                            { text: 'Comm Period', datafield: 'CommissionPeriod', width: '10%', editable: false },
                            { text: 'Rejected Reason', datafield: 'RejectedReason', width: '20%', editable: false }
                        ]
                });

                   
                //}
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
        });

    }

    function fnGetMACounts(portfolios) {
        $.ajax({
            dataType: "json",
            dataFields: [
                { name: 'Identifier', type: 'string' },
                { name: 'Select', type: 'bool' },
                { name: 'BatchNumber', type: 'int' },
                { name: 'BatchName', type: 'string' }
            ],
            id: "Identifier",
            url: "/LReadyToPay/GetCountsBatchesForNew",
            type: "GET",
            data: { iRTPID: "0", blnIsBatchList: "False", strType: "ManualAdjustment", strRTPStatus: "", strPortfolios: portfolios },
            success: function (Counts) {
                document.getElementById('bManualAdjustments').innerHTML = Counts;
                MaGridCount = Counts;
            },
            error: function (reponse) {
            }
        });
    }

    function FnLoadMA(portfolios) {

        $.ajax({
            dataType: "json",
            dataFields: [
                { name: 'Identifier', type: 'string' },
                { name: 'Select', type: 'bool' },
                { name: 'BatchNumber', type: 'int' },
                { name: 'BatchName', type: 'string' }
            ],
            id: "Identifier",
            url: "/LReadyToPay/GetCountsBatchesForNew",
            type: "GET",
            data: { iRTPID: "0", blnIsBatchList: "False", strType: "ManualAdjustment", strRTPStatus: "", strPortfolios: portfolios },
            success: function (Counts) {
                var sourceMA = {
                    dataType: "json",
                    dataFields: [
                        { name: 'Identifier', type: 'string' },
                        { name: 'Select', type: 'bool' },
                        { name: 'BatchNumber', type: 'int' },
                        { name: 'BatchName', type: 'string' }
                    ],
                    id: "Identifier",
                    enctype: 'multipart/form-data',
                    filter: function () {
                        $('#jqxManualGrid').jqxGrid('updatebounddata', 'filter');
                        $('#jqxManualGrid').jqxGrid('clearselection');

                    },
                    sort: function () {
                        $('#jqxManualGrid').jqxGrid('updatebounddata', 'sort');
                        $('#jqxManualGrid').jqxGrid('clearselection');
                    },
                    url: "/LReadyToPay/GetBatchesForNewTest",
                    root: 'Rows',
                    beforeprocessing: function (data) {
                        sourceMA.totalrecords = Counts;
                    },
                    data: { iRTPID: "0", blnIsBatchList: "False", strType: "ManualAdjustment", strRTPStatus: "", strPortfolios: portfolios },
                };
                var MAdataAdapter = new $.jqx.dataAdapter(sourceMA);

                //Check whether the grid is already defined or not and ready for use.
                //var ready = $("#jqxManualGrid").jqxGrid('ready');
                ////if grid is alreday defined and ready for use, just update the grid. Otherwise, define the grid.
                //if (typeof ready != 'undefined') {
                //    $("#jqxManualGrid").jqxGrid('updatebounddata');
                //}
                //else {
                    $('#jqxManualGrid').jqxGrid({
                        source: MAdataAdapter,
                        width: '700',
                        theme: 'bootstrap',
                        columnsresize: true,
                        columnsreorder: true,
                        altrows: true,
                        sortable: true,
                        autoheight: false,
                        autoshowcolumnsmenubutton: false,
                        pageable: true,
                        pagesize: 200,
                        pagesizeoptions: ['100', '200', '500', '1000'],
                        filterable: true,
                        editable: true,
                        showstatusbar: true,
                        virtualmode: true,
                        selectionmode: 'checkbox',
                        enablebrowserselection: true,//--RS on 26th feb 2019, to make field copied
                        rendergridrows: function () {
                            return MAdataAdapter.records;
                        },
                        ready: function () {
                        },
                        columns: [
                            //{ text: 'Select', datafield: 'Select', columntype: 'checkbox', width: 100, editable: true },
                            { text: 'Batch Number', datafield: 'BatchNumber', width: 200, editable: false, },
                            { text: 'Batch Name', datafield: 'BatchName', width: 400, editable: false }
                        ]
                    });
               // }
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
        });

    }

    function fnSelectCalcMAClaimsRecords() {
       
        var str = $("#txtCSV").val();
        var temp = new Array();
        // this will return an array with strings "1", "2", etc.
        temp = str.split(",");
        for (var i = 0; i < temp.length; i++) {
            if ($.isNumeric(temp[i]) == false) {
                alert("These Claim Numbers should be numeric only.");
                return false;
            }
        }
        var ClaimsNotFound = "";
        var notMatched = false;
        $.ajax({
            url: "/LReadyToPay/GetClaimValidate",
            type: "GET",
            cache: false,
            data: { Type: "Claims", CSVData: str, strPortfolios: portfoliovaluestopass },
            success: function (data) {
                $.each(data, function (index, value) {
                    if (value.ID == 0) {
                        notMatched = true;
                        if (ClaimsNotFound == "") {
                            ClaimsNotFound = value.ClaimNumber + ',';
                        } else {
                            ClaimsNotFound = ClaimsNotFound + value.ClaimNumber + ',';
                        }

                    }
                });
                //var data2 = JSON.parse(data);
                if (notMatched == true)
                {
                    alert("These Claim Number is not available for payment: " + ClaimsNotFound + "." );
                } else {
                    alert("All Claims Validated Successfully.");
                }
                
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }


        });
    }

</script>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm", @encType = "multipart/form-data" }))
{
    <div style="padding:05px;">

        @Html.AntiForgeryToken()
        @Html.Hidden("strKeyValues")
        @Html.Hidden("strSelectedPortfolios")
        @Html.Hidden("strSaveStatus")
        <div class="form-horizontal" id="FrmHorizontal">
            <div class="form-group">
                <div class="col-md-4 col-lg-4">
                    @Html.LabelFor(model => model.PaymentBatchName, htmlAttributes: new { @class = "required col-md-10" })
                    <div class="col-md-12 col-lg-12">
                        @Html.EditorFor(model => model.PaymentBatchName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PaymentBatchName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(model => model.PeriodName, htmlAttributes: new { @class = "col-md-8 required" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.PeriodName, null, "-- Select Here --", new { @class = "form-control " })
                        @Html.ValidationMessageFor(model => model.PeriodName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>








        @*Tab Sections*@

        <div id='jqxTabs' class="inner-tabs ">
            <ul class="nav nav-tabs tabs tabs-container-border ">
                <li style="margin-left: 30px;">Portfolio <span class="badge" id="bPort"></span></li>
                <li style="margin-left: 30px;">Calculations <span class="badge" id="bCalculations">0</span></li>
                <li style="margin-left: 30px;">Manual Adjustments <span class="badge" id="bManualAdjustments">0</span></li>
                <li style="margin-left: 30px;">Claims <span class="badge" id="bClaims">0</span></li>
            </ul>
            <div class="tab-content" style="padding:05px;">
                @*@Html.Label("Portfolios", htmlAttributes: new { @class = " col-md-10 required" })*@
                <div class="col-md-8">
                    @Html.Label("Direct", htmlAttributes: new { @class = " col-md-1 col-lg-1" })
                    @Html.CheckBox("Direct", new { @class = " col-md-1 col-lg-1", onchange = "FnSelectRows()" })&ensp;
                    @Html.Label("InDirect", htmlAttributes: new { @class = " col-md-1 col-lg-1" })
                    @Html.CheckBox("InDirect", new { @class = " col-md-1 col-lg-1", onchange = "FnSelectRows()" })&ensp;
                    @Html.Label("EBU", htmlAttributes: new { @class = " col-md-1 col-lg-1 " })
                    @Html.CheckBox("EBU", new { @class = " col-md-1 col-lg-1", onchange = "FnSelectRows()" })&ensp;
                    @Html.Label("CBU", htmlAttributes: new { @class = " col-md-1 col-lg-1" })
                    @Html.CheckBox("CBU", new { @class = " col-md-1 col-lg-1", onchange = "FnSelectRows()" })&ensp;

                </div>
                <br><br />

                <div id="jqxgrid" style="height:250px"></div>
                <br><br />
                @*<button type="button" class="btn btn-red btn-cons" onclick="FnSavePortfolio()">Go&nbsp;</button>*@
            </div>
            <div class="tab-content" style="padding:05px;">
                <div id="jqxCalcGrid" style="height:250px">
                </div>
            </div>
            <div class="tab-content" style="padding:05px;">
                <div id="jqxManualGrid" style="height:250px">
                </div>
            </div>
            <div class="tab-content" style="padding:05px;">
                <div class="col-md-8">
                    <input type="radio" name="viewformat" id="GridView" value="GridView" form="myForm" checked="checked"> GridView
                    <input type="radio" name="viewformat"  id="CSVView" value="CSVView" form="myForm"> CSV View

                </div>
                <br><br />
                <div id="jqxClaimsGrid" style="height:250px">
                </div>

                @*<div id="jqxCSVView" style="height:250px; display:none;">
                    <div class="form-group">
                        <div class="col-md-4 col-lg-4">
                            @Html.Label("Provide Comma seperater Values", htmlAttributes: new { @class = "required col-md-10" })
                            <div class="col-md-12 col-lg-12">
                                @Html.TextArea("txtCSV", null, new { @class = "form-control" })


                            </div>
                        </div>
                        <div class="col-md-4">
            <div class="col-md-8">
                <br/><br/>
                <button type="button" class="btn btn-red btn-cons" onclick="fnSelectCalcMAClaimsRecords()">Validate&nbsp;</button>
                </div>
            </div>

                    </div>
                </div>*@
                    <div class="form-group" id="jqxCSVView" style="height:250px;display:none;">
                        @Html.Label("Provide Comma seperater Values", htmlAttributes: new { @class = "control-label col-md-4" })
                        <br>
                        <div class="col-md-10">
                            @Html.TextArea("txtCSV", new { @class = "col-md-12 col-lg-12 textarea1 setheight",@rows="10" })
                        </div>
                    </div>


                    @*<h4 class="modal-title">Provide Comma seperater Values</h4>
        <input type="text" id="txtCSV" placeholder="Enter Comma seperater Values" />
        <button type="button" class="btn btn-default" id="btnPopUpSubmit1" onclick="fnSelectCalcMAClaimsRecords();">Validate</button>*@
               
            </div>

        </div>
        <div class="col-md-12">
            <button type="button" class="btn btn-borderRed btn-cons" onclick="window.location.href = '@HttpContext.Current.Session["from"]'">Back&nbsp;</button>
            <button type="submit" class="btn btn-red btn-cons" onclick="return SaveAsDraft();">Save as Draft&nbsp;</button>
            <button type="submit" class="btn btn-red btn-cons" onclick="return SaveSelection();">Submit&nbsp;</button>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}














