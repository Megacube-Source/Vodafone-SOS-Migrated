@model Vodafone_SOS_WebApp.Models.ChangePasswordBindingModel
@{
    ViewBag.Title = "Reset password";
    var PasswordPolicies = (Vodafone_SOS_WebApp.ViewModels.LPasswordPolicyViewModel)ViewBag.PasswordPolicies;
}

<script type="text/javascript">
    var IsLengthValid = false;
    var IsUppercaseValid = false;
    var IsLowercaseValid = false;
    var IsNumberValid = false;
    var IsSpecialCharValid = false;
    var DefaultQuestion1Elemnt = '';
    var DefaultQuestion2Elemnt = '';
    var DefaultQuestion3Elemnt = '';
    $(document).ready(function () {
        //save dropdownvalues in a global variable
        DefaultQuestion1Elemnt = document.getElementById('Question1').outerHTML;
        DefaultQuestion2Elemnt = document.getElementById('Question2').outerHTML;
        DefaultQuestion3Elemnt = document.getElementById('Question3').outerHTML;
        $("#NewPassword").keyup(function () {
            // set password variable
            var pswd = $(this).val();
            var Validations =@Html.Raw(Json.Encode(PasswordPolicies));

                //validate the length
                var PasswordLength = Validations.MinLength;
                if (pswd.length < PasswordLength) {
                    document.getElementById('length').style.color = 'red';
                    IsLengthValid = false;
                    } else {
                    document.getElementById('length').style.color = 'darkgreen';
                    IsLengthValid = true;
                    }


                //validate capital letter
                var CapitalLetterRegEx = new RegExp(eval('/[A-Z]{' + Validations.MinUppercase + '}/'));
                if (pswd.match(CapitalLetterRegEx)) {
                    document.getElementById('capital').style.color = 'darkgreen';
                    IsUppercaseValid = true;
                    } else {
                    document.getElementById('capital').style.color = 'red';
                    IsUppercaseValid = false;
                    }

                //validate small letter
                var SmallLetterRegEx = new RegExp(eval('/[a-z]{' + Validations.MinLowercase + '}/'));
                if (pswd.match(SmallLetterRegEx)) {
                    document.getElementById('small').style.color = 'darkgreen';
                    IsLowercaseValid = true;
                    } else {
                    document.getElementById('small').style.color = 'red';
                    IsLowercaseValid = false;
                    }

                    //validate number
                var NumberRegEx = new RegExp(eval('/[0-9]{' + Validations.MinNumbers + '}/'));
                if (pswd.match(NumberRegEx)) {
                    document.getElementById('number').style.color = 'darkgreen';
                    IsNumberValid = true;
                    } else {
                    document.getElementById('number').style.color = 'red';
                    IsNumberValid = false;
                }

                //"/(?:[^`!@@#$%^&\-_=+'\/.,]*[`!@@#$%^&\-_=+'\/.,]){" + Validations.MinSpecialChars + "}/"));
                var SpecialCharRegEx = new RegExp(eval("/[!@@\$%\^\&*\)\(+=._-]{" + Validations.MinSpecialChars + "}/"));
                if (pswd.match(SpecialCharRegEx)) {
                    document.getElementById('specialchar').style.color = 'darkgreen';
                    IsSpecialCharValid = true;
                } else {
                    document.getElementById('specialchar').style.color = 'red';
                    IsSpecialCharValid = false;
                }

                }).focus(function () {
                $('#PasswordInfo').show();
                }).blur(function () {
                $('#PasswordInfo').hide();
                });

            //Hide box by default
        $('#PasswordInfo').hide();
        //$("#Question1").change(function () {
        //    alert($("#Question1").value);
        //});


    });

    function FnSubmitForm()
    {
        if (IsLengthValid == true && IsLowercaseValid == true && IsUppercaseValid == true && IsSpecialCharValid == true && IsNumberValid == true)
        {
           $("#frm").validate({
            });
            if ($('#frm').valid()) {
    if(document.getElementById('Question1').value&&document.getElementById('Question2').value&&document.getElementById('Question3').value)
    {
                document.getElementById('frm').submit();
    }
    else
    {
    alert('Please select all Questions')
    }
            }
        }
        else {
            alert('New Password does not meet policy requirements')
        }
    }

    //This function will remove values from other dropdowns if a value is selected in any of the one dropdown
    function ManageQuestionsDropdown(QuestionElement,SelectedQuestionId)
    {
        var contentId = jQuery(QuestionElement).attr("id");
        //if (SelectedQuestionId) {
            switch (contentId) {
                case 'Question1':
                    if (document.getElementById('Question2').value == SelectedQuestionId || document.getElementById('Question3').value == SelectedQuestionId)
                    {
                        alert('Question already selected')
                        document.getElementById('Question1').value=''
                    }
                    //$('#Question2 option[value="' + SelectedQuestionId + '"]').remove();
                    //$('#Question3 option[value="' + SelectedQuestionId + '"]').remove();
                    break;
                case 'Question2':
                    if (document.getElementById('Question3').value == SelectedQuestionId || document.getElementById('Question1').value == SelectedQuestionId) {
                        alert('Question already selected')
                        document.getElementById('Question2').value = ''
                    }
                    //$('#Question1 option[value="' + SelectedQuestionId + '"]').remove();
                    //$('#Question3 option[value="' + SelectedQuestionId + '"]').remove();
                    break;
                case 'Question3':
                    if (document.getElementById('Question2').value == SelectedQuestionId || document.getElementById('Question1').value == SelectedQuestionId) {
                        alert('Question already selected')
                        document.getElementById('Question3').value = ''
                    }
                    //$('#Question1 option[value="' + SelectedQuestionId + '"]').remove();
                    //$('#Question2 option[value="' + SelectedQuestionId + '"]').remove();
                    break;
            }
        //}
        //else {

        //    $('#Question1').empty();
        //    $('#Question1').html(DefaultQuestion1Elemnt);
        //    $('#Question2').empty();
        //    $('#Question2').html(DefaultQuestion2Elemnt);
        //    $('#Question3').empty();
        //    $('#Question3').html(DefaultQuestion3Elemnt);
        //}
    }

</script>




@using (Html.BeginForm("ResetPassword", "Account", FormMethod.Post, new {id="frm",name="frm", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4 style="color:red;">Reset Password</h4>
    if (PasswordPolicies != null)
    {
    <h5>Password should be minimum @PasswordPolicies.MinLength characters long</h5>
    <h5>Password should contain at least @PasswordPolicies.MinUppercase uppercase characters (A-Z)</h5>
    <h5>Password should contain at least @PasswordPolicies.MinLowercase lowercase characters (a-z)</h5>
    <h5>Password should contain at least @PasswordPolicies.MinNumbers numbers (0-9)</h5>
    <h5>Password should contain at least @PasswordPolicies.MinSpecialChars special characters </h5>
        if (PasswordPolicies.MinAgeDays > 0)
        {
    <h5>Cannot change password again within @PasswordPolicies.MinAgeDays days</h5>
        }
        if (PasswordPolicies.DaysToExpirePassword<=0)
        {
            <h5 style="color:red;">Your password has expired </h5>
        }
    }

    @Html.ValidationSummary("", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Email)
    <h4 class="text-danger">@TempData["ErrorMessage"]</h4>
    <div class="col-md-8">

       
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-3 control-label" })
        <div class="col-md-7">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })

        </div>
    </div>
        
    <div class="form-group">
        @Html.LabelFor(m => m.NewPassword, new { @class = "col-md-3 control-label" })
        <div class="col-md-7">
            @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-3 control-label" })
        <div class="col-md-7">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
        </div>
    </div>
        </div>
        <div class="col-md-4">
            <div id="PasswordInfo" class="boxes">
                <h4>Password must meet these complexity requirements policies:</h4>
                @if (PasswordPolicies != null)
                {
                <ul>
                    <li id="length" style="color:red;">Must have at least <strong>@PasswordPolicies.MinLength characters</strong></li>
                    <li id="capital" style="color:red;">At least <strong>@PasswordPolicies.MinUppercase uppercase characters</strong></li>
                    <li id="small" style="color:red;">At least <strong>@PasswordPolicies.MinLowercase lowercase characters</strong></li>
                    <li id="number" style="color:red;">At least <strong>@PasswordPolicies.MinNumbers numbers</strong></li>
                    <li id="specialchar" style="color:red;">At least <strong>@PasswordPolicies.MinSpecialChars special characters</strong></li>
                    
                </ul>
                }
            </div>
           

            </div>
            <div class="col-md-12">
                <hr />
            </div>
            <div class="col-md-12 col-lg-12">
        <h5 style="color:red;">Answer three secret questions of your choice</h5>
        <h5>Select three different questions of your choice and answer them accordingly. These questions will be randomly shown to you in order to confirm your identity during retrieval of forgotten password.</h5>
        <h5>Please do not write down the Secure Access Questions. They are designed to have unique answers that you, and only you would remember.</h5>
</div>

        <div class="form-group">
        @Html.Label("Question1", htmlAttributes: new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
         @Html.DropDownList("Question1", null, "-- Select Here --", new { @class = "form-control", onchange= "ManageQuestionsDropdown(this,this.value)",style="width:400px; !important;" })
            @*@Html.ValidationMessage("Question1", "Please enter Question1", new { @class = "text-danger" })*@
        </div>
        </div>


        <div  class="form-group">
            @Html.Label("Answer1", htmlAttributes: new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
            @Html.TextBox("Answer1",null, htmlAttributes: new { @class = "form-control" })
                @*@Html.ValidationMessage("Answer1", "Please enter Answer1", new { @class = "text-danger" })*@


        </div>
        </div>
        <div class="form-group">
            @Html.Label("Question2", htmlAttributes: new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownList("Question2", null, "-- Select Here --", new { @class = "form-control", onchange = "ManageQuestionsDropdown(this,this.value)" })
                @*@Html.ValidationMessage("Question2", "Please enter Question2", new { @class = "text-danger" })*@
            </div>
        </div>
            <div class="form-group">
                @Html.Label("Answer2", htmlAttributes: new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBox("Answer2", null, htmlAttributes: new { @class = "form-control" })
                    @*@Html.ValidationMessage("Answer2", "Please enter Answer2", new { @class = "text-danger" })*@


                </div>
            </div>
            <div class="form-group">
                @Html.Label("Question3", htmlAttributes: new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.DropDownList("Question3", null, "-- Select Here --", new { @class = "form-control", onchange = "ManageQuestionsDropdown(this,this.value)" })
                    @*@Html.ValidationMessage("Question3", "Please enter Question3", new { @class = "text-danger" })*@



                </div>
            </div>

            <div class="form-group">
                @Html.Label("Answer3", htmlAttributes: new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBox("Answer3", null, htmlAttributes: new { @class = "form-control" })
                    @*@Html.ValidationMessage("Answer3", "Please enter Answer3", new { @class = "text-danger" })*@


                </div>
            </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" onclick="FnSubmitForm()" class="btn btn-red btn-cons" value="Reset" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
