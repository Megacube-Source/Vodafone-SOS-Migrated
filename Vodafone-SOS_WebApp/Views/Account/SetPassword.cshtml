@model Vodafone_SOS_WebApp.Models.ChangePasswordBindingModel
@{
    ViewBag.Title = "Set User Password";
    var PasswordPolicies = (Vodafone_SOS_WebApp.ViewModels.LPasswordPolicyViewModel)ViewBag.PasswordPolicies;
}

<script>

    var IsLengthValid = false;
    var IsUppercaseValid = false;
    var IsLowercaseValid = false;
    var IsNumberValid = false;
    var IsSpecialCharValid = false;
   
    $(document).ready(function () {
        //save return url
        $.ajax({
            data: { path: window.location.pathname },
            url: "/Home/SaveReturnPath",
            dataType: "json",
            type: "POST",
            success: function (data) {
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
        });
       if ('@TempData["Message"]') {
           alert('@TempData["Message"]')
           window.location.href = '@Url.Action("Index", "Home")';
       }
        if ('@TempData["Error"]') {
           // alert('@TempData["Error"]')
           // alert('Could not insert WorkFlow into database. Please Try again.');
        }
   
        $("#NewPassword").keyup(function () {
            // set password variable
            var pswd = $(this).val();
            var Validations =@Html.Raw(Json.Encode(PasswordPolicies));

                //validate the length
                var PasswordLength = Validations.MinLength;
                if (pswd.length < PasswordLength) {
                    document.getElementById('length').style.color = 'red';
                    IsLengthValid = false;
                    } else {
                    document.getElementById('length').style.color = 'darkgreen';
                    IsLengthValid = true;
                    }


                //validate capital letter
                var CapitalLetterRegEx = new RegExp(eval('/[A-Z]{' + Validations.MinUppercase + '}/'));
                if (pswd.match(CapitalLetterRegEx)) {
                    document.getElementById('capital').style.color = 'darkgreen';
                    IsUppercaseValid = true;
                    } else {
                    document.getElementById('capital').style.color = 'red';
                    IsUppercaseValid = false;
                    }

                //validate small letter
                var SmallLetterRegEx = new RegExp(eval('/[a-z]{' + Validations.MinLowercase + '}/'));
                if (pswd.match(SmallLetterRegEx)) {
                    document.getElementById('small').style.color = 'darkgreen';
                    IsLowercaseValid = true;
                    } else {
                    document.getElementById('small').style.color = 'red';
                    IsLowercaseValid = false;
                    }

                    //validate number
                var NumberRegEx = new RegExp(eval('/[0-9]{' + Validations.MinNumbers + '}/'));
                if (pswd.match(NumberRegEx)) {
                    document.getElementById('number').style.color = 'darkgreen';
                    IsNumberValid = true;
                    } else {
                    document.getElementById('number').style.color = 'red';
                    IsNumberValid = false;
                }

                //"/(?:[^`!@@#$%^&\-_=+'\/.,]*[`!@@#$%^&\-_=+'\/.,]){" + Validations.MinSpecialChars + "}/"));
                var SpecialCharRegEx = new RegExp(eval("/([^a-zA-Z ]+){" + Validations.MinSpecialChars + "}/"));
                if (pswd.match(SpecialCharRegEx)) {
                    document.getElementById('specialchar').style.color = 'darkgreen';
                    IsSpecialCharValid = true;
                } else {
                    document.getElementById('specialchar').style.color = 'red';
                    IsSpecialCharValid = false;
                }

                }).focus(function () {
                $('#PasswordInfo').show();
                }).blur(function () {
                $('#PasswordInfo').hide();
                });

            //Hide box by default
        $('#PasswordInfo').hide();
        //$("#Question1").change(function () {
        //    alert($("#Question1").value);
        //});


    });

    function FnSubmitForm()
    {
        if (IsLengthValid == true && IsLowercaseValid == true && IsUppercaseValid == true && IsSpecialCharValid == true && IsNumberValid == true)
        {
           $("#frm").validate({
            });
            if ($('#frm').valid()) {
                document.getElementById('frm').submit();
            }
        }
        else {
            alert('New Password does not meet policy requirements')
        }
    }

</script>


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm", @encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h2> Please Change Password</h2>
        @if (PasswordPolicies != null)
        {
        <h5>Password should be minimum @PasswordPolicies.MinLength characters long</h5>
        <h5>Password should contain at least @PasswordPolicies.MinUppercase uppercase characters (A-Z)</h5>
        <h5>Password should contain at least @PasswordPolicies.MinLowercase lowercase characters (a-z)</h5>
        <h5>Password should contain at least @PasswordPolicies.MinNumbers numbers (0-9)</h5>
        <h5>Password should contain at least @PasswordPolicies.MinSpecialChars special characters </h5>
        if (PasswordPolicies.MinAgeDays > 0)
        {
        <h5>Cannot change password again within @PasswordPolicies.MinAgeDays days</h5>
        }
        if (PasswordPolicies.DaysToExpirePassword<=0)
        {
        <h5 style="color:red;">Your password has expired </h5>
        }
        }
        @Html.Hidden("UserId")
        @Html.Hidden("Email")
        <h4 class="text-danger">@ViewData["ErrorMessage"]</h4>
        <h4 class="text-danger">@ViewData["SuccessMessage"]</h4>

        <div class="col-md-8">
        <div class="form-group">
                @Html.LabelFor(x => x.NewPassword, htmlAttributes: new { @class = "col-md-4 required control-label" })
            <div class="col-md-8">
                @Html.EditorFor(x => x.NewPassword, new { @class = "col-md-12 control-label" })
                @Html.ValidationMessageFor(x => x.NewPassword, "", new { @class = "text-danger col-md-12" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label required col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(x => x.ConfirmPassword, new { @class = "col-md-12 control-label" })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger col-md-12" })
            </div>
        </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <!--<input type="button" value="Back" onclick="window.location.href = '@HttpContext.Current.Session["from"]'" class="btn btn-info" />-->
                    <input type="button" onclick="FnSubmitForm()" value="Save" class="btn btn-red btn-cons" />

                </div>
            </div>
            </div>
        <div class="col-md-4">
            <div id="PasswordInfo" class="boxes">
                <h4>Password must meet these complexity requirements policies:</h4>
                @if (PasswordPolicies != null)
                {
                    <ul>
                        <li id="length" style="color:red;">Must have at least <strong>@PasswordPolicies.MinLength characters</strong></li>
                        <li id="capital" style="color:red;">At least <strong>@PasswordPolicies.MinUppercase uppercase characters</strong></li>
                        <li id="small" style="color:red;">At least <strong>@PasswordPolicies.MinLowercase lowercase characters</strong></li>
                        <li id="number" style="color:red;">At least <strong>@PasswordPolicies.MinNumbers numbers</strong></li>
                        <li id="specialchar" style="color:red;">At least <strong>@PasswordPolicies.MinSpecialChars special characters</strong></li>

                    </ul>
                }
            </div>

        </div>

       

    </div>

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
