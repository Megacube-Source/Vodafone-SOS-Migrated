
@{
    ViewBag.Title = "Index";
}

@*to get the columns list for new item grid*@
@{
    var ColumnTooltip = @ViewBag.ColumnTooltip;

    //ViewBag.ColumnTooltip

}

<div style="padding:10px;">
    @using (Html.BeginForm("SaveGridSelection", "LCompanySpecificColumns", FormMethod.Post, new { id = "frm", name = "frm" }))
    {
        @Html.AntiForgeryToken()
        @Html.Hidden("model")
        @Html.Hidden("banner")
        <div class="form-horizontal">
            <div class="form-group">
                @Html.Label("Choose Form", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ChooseForm", new List<SelectListItem> { new SelectListItem { Text = "-- Select Here --", Value = null }, new SelectListItem { Text = "Payee", Value = "Payee" }, new SelectListItem { Text = "Claims", Value = "Claims" }, new SelectListItem { Text = "Calculations", Value = "Calculations" }, new SelectListItem { Text = "Pay", Value = "Pay" } }, new { @class = "form-control col-md-8", id = "frmname", @onchange = "fnGetFormId();" })  @*onchange = "GetGrid(this.value)"*@
                    @*&emsp;<input type="button" value="Go" class="btn btn-info">*@
                </div>
            </div>

        </div>
    }
    <br>
    <p style="text-decoration:solid;color:red;">Note:-For Calculations(Grid) choose only Label,Ordinal and DisplayOnForm </p>

    <div id="jqxgrid">
    </div>
    <br>
    <div id="txtbox" style="display:none;">
        <span style="text-decoration:solid">Banner Text (4000 characters). This text will be displayed at the bottom of the form</span>
        <textarea id="bnr" class="textarea1" style="height:100px;" placeholder="Enter Banner Text"></textarea>
    </div>

    <br>
    <div class="col-md-10" id="SaveButton" style="display:none;">
        <button class="btn btn-red btn-cons" onclick="window.location.href='/LCompanySpecificColumns/Index'">Back&nbsp;</button>&ensp;
        <button class="btn btn-red btn-cons" onclick="SaveSelection()">Save &nbsp;</button>
    </div>
</div>

<div class="modal fade" id="myModal1" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Select Dropdown</h4>
            </div>
            <div class="modal-body">

                @Html.DropDownList("DropdownId", null, "-- No Dropdown --", new { @class = "form-control " })
                &ensp;<br>
                <button type="button" class="btn btn-red btn-cons" data-dismiss="modal" onclick="AddColumnDetailToArray()">Save</button>
            </div>
        </div>

    </div>
</div>

@Scripts.Render("~/bundles/jqxgridbundle")
<script type="text/javascript" src="~/Scripts/jqxgrid.storage.js"></script>
<script src="~/Scripts/jqxloader.js"></script>
<script type="text/javascript">

    var selectedFormName;
    function fnGetFormId() {
        selectedFormName = document.getElementById('frmname').value;
        GetGrid(selectedFormName);
        getBannerDetail(selectedFormName);
    }

     var isChanged=false;
     window.onbeforeunload = function () {

        if (isChanged) {
                return "Are you sure you want to leave this page ? There are unsaved changes that will be lost"; @*window.location.href = '@HttpContext.Current.Session["from"]';*@
        }
    }

    $(document).ready(function () {

     //Add JqxLoader when form is submitted to disable further clicks
        $("#jqxLoader").jqxLoader({ isModal: true, width: 200, height: 150, imagePosition: 'center' });
        if ('@TempData["Error"]') {
            alert('@TempData["Error"]')
        }

        if ('@TempData["Message"]') {
            alert('@TempData["Message"]')
        }
        // var selection=document.getElementById('')
        // GetGrid('Payee')
        if('@ViewBag.ChooseForm')
        {
            var FormValue = '@ViewBag.ChooseForm'
            GetGrid(FormValue)
            getBannerDetail(FormValue)

        }

        //ViewBag.ColumnTooltip


        $("#jqxgrid").on("bindingcomplete", function (event) {
            AddRowsToArray();
        });
    });

    function GetGrid(dat) {

        var dropdownSource = {
            dataType: "json",
            dataFields: [
                { name: 'Id', type: 'string' },
                { name: 'LdName', type: 'string' }
            ],
            //id: "Id",
            url: "/LCompanySpecificColumns/GetLDropDowns/"
        };
        var dropdownlistAdapter = new $.jqx.dataAdapter(dropdownSource, { autoBind: true, async: false });
        var dropdownList = [];
        dropdownList.push({ LdName: 'No DropDown', Id:'' });
        for (var i = 0; i < dropdownlistAdapter.records.length; ++i) {
            dropdownList.push({ LdName: dropdownlistAdapter.records[i]['LdName'], Id: dropdownlistAdapter.records[i]['Id'] });
        }

        var source = {
            dataType: "json",
            dataFields: [
                { name: 'Id', type: 'string' },
                { name: 'ColumnName', type: 'string' },
                { name: 'DataType', type: 'string' },
                 { name: 'IsNullable', type: 'string' },
                  { name: 'CanBeDisplayed', type: 'bool' },
                  { name: 'ColumnLabel', type: 'string' },
                  { name: 'LcscTooltip', type:'string'},
                  { name: 'IsManadatory', type: 'bool' },
                  { name: 'LcscDropDownId', type: 'int' },
                  { name: 'LcscOrdinalPosition', type: 'int' },
                  { name: 'LdName', type: 'string' },
                  { name: 'LcscIsReportParameter', type: 'bool' },
                  { name: 'LcscReportParameterOrdinal', type: 'int' }
            ],
            //id: "Id",
            data: { Selection: dat },
            url: "/LCompanySpecificColumns/GetColumnsGrid"
        };


        var dataAdapter = new $.jqx.dataAdapter(source)

        var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
            //alert(row)
            if (value == "YES") {
                return 'Not Mandatory';
            } else {
                return 'Mandatory';
            }
        };

        var Actionscellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
            var RowData = $("#jqxgrid").jqxGrid('getrowdata', row);
            if (RowData.CanBeDisplayed == true && (RowData.ColumnName == 'A01' || RowData.ColumnName == 'A02' || RowData.ColumnName == 'A03' || RowData.ColumnName == 'A04' || RowData.ColumnName == 'A05' || RowData.ColumnName == 'A06' || RowData.ColumnName == 'A07' || RowData.ColumnName == 'A08' || RowData.ColumnName == 'A09' || RowData.ColumnName == 'A10')) {
                return '&emsp;<button onclick="return FnAddDropdown()" class="GridButton">DropDown</button>';
            }
            else {
                return '&emsp;<button style="display:none;">DropDown</button>';
            }
        };

        //todisable checkbox
        var cellbeginedit = function (row, datafield, columntype, value) {
            var data = $('#jqxgrid').jqxGrid('getrowdata', row);

            if (data.IsNullable == "NO") { alert("This Object is not modifiable"); return false; }

            return true;

        };

        $('#jqxgrid').bind('cellendedit', function (event) {

            @*var ToolTip = new Array();

             var data = @Html.Raw(Json.Encode(ColumnTooltip));

                for (var i = 0; i < data.length; ++i) {
                    //datafieldsNewItems.push({ name: data[i], type: data[i].DataType });
                    ToolTip.push({ text: data[i] });

                    alert(ToolTip);
                }*@




            // column data field.
            var dataField = event.args.datafield;
            // row's bound index.
            var rowBoundIndex = event.args.rowindex;
           isChanged=true;
            // alert(dataField)
            if (dataField == "CanBeDisplayed" || dataField =="IsManadatory"||dataField =="LcscIsReportParameter") {
                // row's data.
                var rowData = args.row;
                if (rowData.IsNullable == "NO") {
                    $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "CanBeDisplayed", true);
                    $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsManadatory", true);
                   // $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "LcscIsReportParameter", true);do not default this column

                }
                else {
                    if (rowData.CanBeDisplayed == false)
                    {
                        //5) If 'Display on Form' is unchecked, then Is Mandatory should be unchecked and DropDown should be removed
                        $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsManadatory", false);
                       $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "LcscIsReportParameter", false);
                        $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "LdName", '');
                        arr[rowBoundIndex][4] = '';//removing dropdownfrom array
                    }
                }
                //Conditional validation suggested  by JS is commented on 25 May2018
                //if (rowData.ColumnName == 'CanRaiseClaims' || rowData.ColumnName == 'CreateLogin' || rowData.ColumnName == 'WFComments')
                //{
                //    $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "CanBeDisplayed", true);
                //    $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsManadatory", false);
                //  //As disscussed with JS these column values will always be false  for Make Manadatory and Report Parameter
                //  $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "LcscIsReportParameter", false);
                //}

            }
            //var state = $("#jqxgrid").jqxGrid('savestate');
            //$("#jqxgrid").jqxGrid('loadstate', state);
           // $('#jqxgrid').jqxGrid('selectrow', rowBoundIndex);
            //$('#jqxgrid').jqxGrid('selectrow', 0);
            //$('#jqxgrid').jqxGrid('refresh');
        });

        $('#jqxgrid').jqxGrid({
            source: dataAdapter,
            width: '100%',
            autoheight: true,
            theme: 'bootstrap',
            sortable: false,
            columnsresize: false,
            columnsreorder: false,
            altrows: true,
            showstatusbar: true,
            keyboardnavigation: true,
          //  selectionmode:'none',
            editable: true,
            ready: function () {

            },

            columns: [
                { text: 'Column Name', datafield: 'ColumnName', editable: false ,width: '15%',pinned: true},
                { text: 'System Mandatory', datafield: 'IsNullable', editable: false, cellsrenderer: cellsrenderer ,width: '10%',pinned: true },
                {
                    text: 'Label', columntype: 'textbox', datafield: 'ColumnLabel', width: '20%',
                    initeditor: function (row, column, editor) {
                        editor.attr('maxlength', 100);//max length of label is 100 chars
                    }
                },
                { text: 'ToolTip', columntype: 'textbox', datafield: 'LcscTooltip', width: '10%' },
                { text: 'Ordinal', datafield: 'LcscOrdinalPosition',width: '10%' },
                { text: 'Report Ordinal', datafield: 'LcscReportParameterOrdinal' ,width: '10%'},
               //{ text: 'Display on Form', datafield: 'CanBeDisplayed', columntype: 'checkbox', width: '10%' },
                { text: 'Display', datafield: 'CanBeDisplayed', columntype: 'checkbox', width: '10%' },
               { text: 'Make Manadatory', datafield: 'IsManadatory', columntype: 'checkbox', width: '10%' },
               { text: 'Report Filter', datafield: 'LcscIsReportParameter', columntype: 'checkbox', width: '10%' },
               {
                   text: 'DropDown', columntype: 'textbox', datafield: 'LdName', editable: false, width: '10%',
                   //initeditor: function (row, cellvalue, editor) { //dropdownlist
                   //    var RowData = $('#jqxgrid').jqxGrid('getrowdata', row);
                   //    if (RowData.CanBeDisplayed == true) {
                   //        if (String(RowData.ColumnName) == 'A01' || String(RowData.ColumnName) == 'A02' || String(RowData.ColumnName) == 'A03' || String(RowData.ColumnName) == 'A04' || String(RowData.ColumnName) == 'A05' || String(RowData.ColumnName) == 'A06' || String(RowData.ColumnName) == 'A07' || String(RowData.ColumnName) == 'A08' || String(RowData.ColumnName) == 'A09' || String(RowData.ColumnName) == 'A10') {
                   //            editor.jqxDropDownList({ placeHolder: "-- Select Here --", disabled: false, source: dropdownList, displayMember: "LdName", valueMember: "Id", dropDownWidth: 320, dropDownHeight: 200, autoDropDownHeight: true });
                   //            editor.on('change', function (event) {
                   //                var args = event.args;
                   //                var item = args.item;
                   //                if (item) {
                   //                    AddColumnDetailToArray(item.value, row);
                   //                }

                   //            });
                   //        }
                   //        else {
                   //            //alert('Cannot choose Dropdown for this column')
                   //            editor.jqxDropDownList({ placeHolder: "Cannot choose Dropdown for this column", disabled: true });
                   //        }
                   //    }
                   //    else {
                   //        editor.jqxDropDownList({ placeHolder: "Please select Display On Form", disabled: true });
                   //    }
                   //    //Populate the selected dropdown if value is present
                   //    if (RowData.LcscDropDownId) {
                   //        editor.jqxDropDownList('selectItem', RowData.LcscDropDownId)
                   //    }

                   //}
               },
               { text: 'Actions', datafield: 'Id', cellsrenderer: Actionscellsrenderer,editable:false, width: '10%' }

            ]
        });

        //make save button visible
        document.getElementById('SaveButton').style.display = 'block'

        //txtbox
        document.getElementById('txtbox').style.display = 'block'

    }


    function getBannerDetail(formname) {
        document.getElementById('bnr').value = '@ViewBag.updatedBannerValue'
        $.ajax({
            type: "Get",
            cache: false,
            data: { Selection: formname },
            url: "/LCompanySpecificColumns/getBannerDetail",
            dataType: "json",
            success: function (data) {
                if (data == "") {
                    document.getElementById('bnr').value = "";
                }

               else if (data == null) {
                    document.getElementById('bnr').value = "";
                }
                else {
                    document.getElementById('bnr').value = data;
                    //document.getElementById('banner').value = data;
                }
            },
            error: function (reponse) {
                console.log(reponse);
                alert("error");
            }
        });
    }


    //This function will open a popup to select dropdown
    function FnAddDropdown()
    {
        $("#myModal1").modal();
    }


    var arr = [];
    function SaveSelection() {
        var items = $('#jqxgrid').jqxGrid('getrows')
        var bannertxt = document.getElementById('bnr').value

        for (var i = 0; i < items.length; i++) {
            arr[i][0] = items[i].ColumnName
            arr[i][1] = items[i].ColumnLabel==null?'':String(items[i].ColumnLabel).split(',').join('.');//We are using comma to seperate values so cannot allow comma in label
            arr[i][2] = items[i].CanBeDisplayed
            arr[i][3] = items[i].IsManadatory
            arr[i][5] = items[i].LcscOrdinalPosition
            arr[i][6] = items[i].LcscIsReportParameter
            arr[i][7] = items[i].LcscReportParameterOrdinal
            arr[i][8] = items[i].DataType;
            arr[i][9] = items[i].LcscTooltip;

        }
        document.getElementById('model').value = arr;
        document.getElementById('banner').value = bannertxt;
        //banner

        if (items.length > 0) {
            isChanged = false;
             document.getElementById('frm').submit();
        }

    }

    //This function will be called onchangeevent of dropdown to save the value of dropdown selected by user
    function AddColumnDetailToArray()
    {
        var DropdownId = document.getElementById('DropdownId').value;
        var SelectedRow = $('#jqxgrid').jqxGrid('getselectedrowindex')
        //This validation is applied to prevent the dropdown id to be applied in incorrect row
        var ValueOfSelect = document.getElementById("DropdownId");
        var selectedText = ValueOfSelect.options[ValueOfSelect.selectedIndex].text;
        $("#jqxgrid").jqxGrid('setcellvalue', SelectedRow, "LdName", selectedText);
            arr[SelectedRow][4] = DropdownId;

    }

    //This function will add same no of array items as grid rows
    function AddRowsToArray() {
        var rows = $('#jqxgrid').jqxGrid('getrows');
        arr = [];
        for (var i = 0; i < rows.length; i++) {
            arr[i] = [];
            if (rows[i].IsNullable == "NO")//Make Make manadatory column true if column is manadatory in database
            {
                $("#jqxgrid").jqxGrid('setcellvalue', i, "IsManadatory", true);
  //  $("#jqxgrid").jqxGrid('setcellvalue', i, "LcscIsReportParameter", true); do not default this column
                arr[i][3] = true;//value for IsManadatory column
            }
            else {
                arr[i][3] = false;
            }

            if (rows[i].LcscDropDownId) {
                arr[i][4] = rows[i].LcscDropDownId;
            }
            else {
                arr[i][4] = '';
            }

            if (rows[i].LcscTooltip) {
                arr[i][9] = rows[i].LcscTooltip;
            }
            else {
                arr[i][9] = '';
            }

            console.log(arr[i]);
            //SS:-Commenting the extra logic
    //        if (rows[i].ColumnName == 'CanRaiseClaims' || rows[i].ColumnName == 'CreateLogin' || rows[i].ColumnName == 'Address' || rows[i].ColumnName == 'WFComments') {
    //            $("#jqxgrid").jqxGrid('setcellvalue', i, "CanBeDisplayed", true);
    //            $("#jqxgrid").jqxGrid('setcellvalue', i, "IsManadatory", false);
    //   $("#jqxgrid").jqxGrid('setcellvalue', i, "LcscIsReportParameter", false);
    ////As disscussed with JS these column values will always be false  for Make Manadatory,Report Parameters
    //        }
        }
    }



</script>

<div id="jqxLoader">
</div>