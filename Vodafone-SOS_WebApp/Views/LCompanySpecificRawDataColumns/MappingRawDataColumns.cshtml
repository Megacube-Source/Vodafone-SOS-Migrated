
@{
    ViewBag.Title = "MappingRawDataColumns";
}


<script>
    var isChanged = false;
    $(document).ready(function () {
        $("#jqxgrid").on('cellbeginedit', function (event) {
            isChanged = true;
        })

        GetGrid();
        var FormType = '@ViewBag.FormType'
        if (FormType == 'disabled')
        {
            $('*', 'form').attr('disabled', 'disabled');
            $('#Back').removeAttr('disabled')
            $('#Back1').removeAttr('disabled')
            document.getElementById('GridDiv').style.pointerEvents = 'none';
        }

        $("#jqxgrid").on("bindingcomplete", function (event) {
            AddRowsToArray();
        });



    })

    window.onbeforeunload = function () {

        if (isChanged) {
            return "Are you sure you want to leave this page ? There are unsaved changes that will be lost"; @*window.location.href = '@HttpContext.Current.Session["from"]';*@
        }
    }

    function GetGrid() {
        var Form1 = $("#frm")
        $.ajax({
            data: Form1.serialize(),
            url: "/LCompanySpecificRawDataColumns/GetColumnMappingGrid",
            dataType: "json",
            type: "POST",
            success: function (data) {
                var sourcea = {
                    dataType: "json",
                    dataFields: [
                        { name: 'Id', type: 'string' },
                        { name: 'ColumnName' , type: 'string' },
                        { name: 'ColumnLabel', type: 'string' },
                        { name: 'DisplayOnForm', type: 'bool' },
                        { name: 'Ordinal', type: 'int' },
                        { name: 'DataType', type: 'string' }

                    ],
                    localdata: data
                };
                var dataAdaptera = new $.jqx.dataAdapter(sourcea)
                var columnCheckBox = null;
                var updatingCheckState = false;

            /*    var dropdownSource = {
                    dataType: "json",
                    dataFields: [
                 { name: 'Id', type: 'string' },
                { name: 'ColumnName', type: 'string' },
                { name: 'DataType', type: 'string' }
                    ],
                    //id: "Id",
                    url: "/LCompanySpecificRawDataColumns/GetLRawDataColumns/"
                };
                var dropdownlistAdapter = new $.jqx.dataAdapter(dropdownSource, { autoBind: true, async: false });
                var dropdownList = [];
                for (var i = 0; i < dropdownlistAdapter.records.length; i++) {
                    dropdownList[i] = dropdownlistAdapter.records[i]['ColumnName'];
                }*/

                var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
                    //alert(row)
                    if (value == "YES") {
                        return 'Not Manadatory';
                    } else {
                        return 'Manadatory';
                    }
                };

                //$('#jqxgrid').bind('cellendedit', function (event) {
                //    // column data field.
                //    var dataField = event.args.datafield;
                //    // row's bound index.
                //    var rowBoundIndex = event.args.rowindex;
                //    // alert(dataField)
                //    if (dataField == "DisplayOnForm") {
                //        // row's data.
                //        var rowData = args.row;
                //        if (rowData.ColumnName.indexOf("XTransactionNumber")!=-1) {
                //            $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "DisplayOnForm", true);//The Transaction number checkbox is always checked
                //            alert("This Column from Sos is not modifiable")
                //        }

                //    }

                //});

                //var cellbeginedit = function (row, datafield, columntype, value) {
                //    var data = $('#jqxgrid').jqxGrid('getrowdata', row);

                //    if (data.ColumnName.indexOf("XTransactionNumber") != -1) { alert("This Column from Sos is not modifiable"); return false; }

                //    return true;

                //};

                $('#jqxgrid').jqxGrid({
                    source: dataAdaptera,
                    width: '100%',
                    autoheight: true,
                    theme: 'bootstrap',
                    sortable: true,
                    showtoolbar: true,
                    columnsresize: true,
                    columnsreorder: true,
                    editable: true,
                    //pagesize: 20,
                    //pagesizeoptions: [5, 10, 20, 50, 100, 200, 500],
                    rowdetails: true,
                    rendertoolbar: function (toolbar) {
                        var container = $('<div style="margin: 5px;"></div>');
                        toolbar.append(container);
                        var Names = $("<div style = 'margin: 10px;'><b> RawData Columns Mapping</b></div>");
                        container.append(Names);
                    },
                    ready: function () {

                    },

                    columns: [

                        { text: 'Column from OPCO', datafield: 'ColumnName', editable: false, width: '50%' },

                       /* {
                            text: 'Column from SOS', columntype: 'dropdownlist', datafield: 'RawDataColumn', width: '20%',
                            initeditor: function (row, cellvalue, editor) {
                                editor.jqxDropDownList({ source: dropdownList, displayMember: "ColumnName", valueMember: "ColumnName", dropDownWidth: 320, dropDownHeight: 250, autoDropDownHeight: false });
                                editor.on('select', function (event) {
                                    var args = event.args;
                                    var item = args.item;
                                    if (item) {
                                        AddColumnDetail(item.label);
                                    }

                                });

                            }
                        },*/
                        { text: 'Column Label', datafield: 'ColumnLabel' ,
     cellvaluechanging: function (row, datafield, columntype, oldvalue, newvalue) {
        if (newvalue.length > 50) {
            return oldvalue;
        };
    }
    },
    { text: 'Ordinal', datafield: 'Ordinal', editable: true, width: '10%' },
                        {
                            text: 'Display On Form', datafield: 'DisplayOnForm', columntype: 'checkbox',
                            //rendered: function (element) {
                            //    $(element).jqxCheckBox();
                            //    columnCheckBox = $(element);
                            //    $(element).on('change', function (event) {
                            //        var checked = event.args.checked;

                            //        var rows = $('#jqxgrid').jqxGrid('getrows');
                            //        for (var i = 0; i < rows.length; i++) {



                            //             // select all rows when the column's checkbox is checked.
                            //          if (checked) {
                            //              $("#jqxgrid").jqxGrid('setcellvalue', i, "DisplayOnForm", true);

                            //        }
                            //        // unselect all rows when the column's checkbox is checked.
                            //          else if (checked == false) {
                            //              $("#jqxgrid").jqxGrid('setcellvalue', i, "DisplayOnForm", false);

                            //        }

                            //        }


                            //    });
                           // }
                        },


                        //{ text: 'Actions', datafield: 'Id', cellsrenderer: cellsrenderer }
                    ]
                });
                document.getElementById('ButtonsDiv').style.display = 'block'
              //  document.getElementById('SubmitButton').style.display = 'block' //displaysubmit button AutofillButton
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
        });


    }

    //This function will add same no of array items as grid rows
    function AddRowsToArray()
    {
        var rows = $('#jqxgrid').jqxGrid('getrows');
        for (var i = 0; i < rows.length; i++) {
            GridData[i] = [];
            //commented code to check display on form for transaction number
            //if (rows[i].ColumnName.indexOf("XTransactionNumber") != -1) {
            //    $("#jqxgrid").jqxGrid('setcellvalue', i, "DisplayOnForm", true);
            //    $("#jqxgrid").jqxGrid('setcellvalue', i, "RawDataColumn", "LrdAlteryxTransactionNumber");
            //}
          /*  if(rows[i].RawDataColumn)
            {
                GridData[i][0] = rows[i].RawDataColumn;
            }*/
        }
    }

    //This variable will store grid data in an array
    var GridData = [];
    function AddColumnDetail(Column) {

        if (Column) {
            var rowindex = $('#jqxgrid').jqxGrid('getselectedrowindex');
            if (rowindex != -1) {
                GridData[rowindex][0] = Column
            }
        }
    }

    //This function finally submits the grid data to the controller//
    function checkSubmit() {
        //alert(GridData.length)
        var GridArray = [];
        var count = 0;
        var rows = $('#jqxgrid').jqxGrid('getrows');
        for (var i = 0; i < rows.length; i++) {
                GridArray[count] = [];
                //GridArray[count][0] = GridData[i][0];
                GridArray[count][0] = rows[i].ColumnName;
                GridArray[count][1] = rows[i].ColumnLabel;
                GridArray[count][2] = rows[i].DisplayOnForm;
                GridArray[count][3] = rows[i].DataType;
                GridArray[count][4] = rows[i].Id;
    var Ord=0;
    if(rows[i].Ordinal)
    {
    Ord=rows[i].Ordinal;
    }
               GridArray[count][5] = Ord;
                count = count + 1;

        }

       // var newArray = GridData.filter(value => Object.keys(value).length !== 0);//This line is added to remove rows whose rows are empty in which comments is not provided or blank
        document.getElementById('model').value = GridArray;
        isChanged = false;
        document.getElementById('frm').submit()
    }

    //method to get XSchema Tables by companyId
    //function GetXSchemaTables(CompanyId)
    //{
    //    $("#TableId").empty()
    //    if (CompanyId) {
    //        var procemessage = "<option value=null> Please wait...</option>";
    //        $("#TableId").html(procemessage).show();
    //        var url = "/LCompanySpecificRawDataColumns/GetXSchemaTableByCompanyId/";

    //        $.ajax({
    //            url: url,
    //            data: { CompanyId: CompanyId },
    //            cache: false,
    //            type: "POST",
    //            success: function (data) {
    //                if (data.length != 0) {
    //                    var markup = "<option value=null>-- Select Here --</option>";
    //                    for (var x = 0; x < data.length; x++) {
    //                        markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
    //                    }
    //                    $("#TableId").html(markup).show();
    //                } else {
    //                    var procemessage = "<option value=0> No Records Found..</option>";
    //                    $("#TableId").html(procemessage).show();
    //                }
    //            },
    //            error: function (reponse) {
    //                alert("error : " + reponse);
    //            }
    //        });
    //    }
    //}

    //This function will auto fill the raw data columns in grid with matching data types
    function FnAutoFillGrid()
    {
        var Form1 = $("#frm")
        $.ajax({
            data: Form1.serialize(),
            url: "/LCompanySpecificRawDataColumns/GetAutoFillColumnMappingGrid",
            dataType: "json",
            type: "POST",
            success: function (data) {
                isChanged = true;
        //These variables are defined to store count of Nvarchar,int and date type columns mapped
        var sourcea = {
            dataType: "json",
            dataFields: [
                { name: 'Id', type: 'string' },
                { name: 'ColumnName', type: 'string' },
                { name: 'ColumnLabel', type: 'string' },
                { name: 'DisplayOnForm', type: 'bool' },
                { name: 'RawDataColumn', type: 'string' },
                { name: 'DataType', type: 'string' }

            ],
            localdata: data
        };
        var dataAdaptera = new $.jqx.dataAdapter(sourcea)
        $('#jqxgrid').jqxGrid({
            source: dataAdaptera
        })
            },
            error: function (reponse) {
                alert("error : " + reponse);
            }
        });
    }


 </script>


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm" }))
{
    @Html.Hidden("model")
    @Html.Hidden("RawDataTableId")
    @Html.Hidden("FormType")
    @Html.Hidden("RawDataTableName")
    @Html.Hidden("IsRawDataTableMapped")

<div style="padding:10px;" id="grid">
    <h4 class="text-danger">Table Name : @ViewBag.RawDataTableName</h4>
    <h4 class="text-danger">@ViewData["ErrorMessage"]</h4>
    <br>
    <button type="button" id="Back1" class="btn btn-borderRed btn-cons" onclick="window.location.href = '@HttpContext.Current.Session["from"]'">Back&nbsp;</button>
    <button type="button" onclick="FnAutoFillGrid()" class="btn btn-red btn-cons">Auto Fill&nbsp;</button>
    <button type="button" onclick="checkSubmit()" class="btn btn-red btn-cons">Submit&nbsp;</button>&emsp;
    <h4 class="text-danger">Column label will be trimmed to max 50 chars if column name is bigger than 50 chars </h4>
    @*<br>&ensp;<br>*@
    <div id="GridDiv">
        <div id="jqxgrid">

        </div>
    </div>
    <div class="col-md-12 col-lg-12" id="ButtonsDiv" style="display:none;">
        <br>
        <button type="button" id="Back" class="btn btn-borderRed btn-cons" onclick="window.location.href = '@HttpContext.Current.Session["from"]'">Back&nbsp;</button>
        <button type="button" id="AutofillButton" onclick="FnAutoFillGrid()" class="btn btn-red btn-cons">Auto Fill&nbsp;</button>
        <button type="button" id="SubmitButton" onclick="checkSubmit()" class="btn btn-red btn-cons">Submit&nbsp;</button>&emsp;

    </div>
</div>
}







