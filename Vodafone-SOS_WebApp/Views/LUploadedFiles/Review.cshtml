@model Vodafone_SOS_WebApp.ViewModels.LRefFileViewModel
@{
    ViewBag.Title = "Create";
}

<script src="~/Scripts/ProjectScripts/ProjectScript.js"></script>@*//this script will contain methods common in different views*@


<script>

    //variables defined here are global which can be used in multiple functions
    var FormDat = new FormData();
    //This variable is defined to store value if form has any changes since it has loaded
    //var isChanged = false;
    var PortfolioArray = [];
    $(document).ready(function () {


        //The below code checks for changes in form controls
        $('input,select,textarea').change(function () {
            isChanged = true;
        })

        var TransactionId='@Model.Id'
        //The below code will load a grid of portfolios on this page
        var Portfoliosource = {
            dataType: "json",
            dataFields: [
                { name: 'Id', type: 'string' },
                { name: 'RcPrimaryChannel', type: 'string' },
                { name: 'LpBusinessUnit', type: 'string' },
                { name: 'RcName', type: 'string' },
                { name: 'Select', type: 'string' },

            ],
            id: "Id",
            data: { TransactionId: TransactionId, EntityType: 'LRefFiles' },
            url: "/Home/GetPortfolioGridForEdit"
        };

        var PortfoliodataAdapter = new $.jqx.dataAdapter(Portfoliosource)

        $('#jqxgrid').jqxGrid({
            source: PortfoliodataAdapter,
            width: '100%',
            height:'40%',
            //autoheight: true,
            theme: 'bootstrap',
            sortable: true,
            columnsresize: true,
            columnsreorder: true,
            altrows: true,
            pageable: false,
            filterable: true,
            enablebrowserselection: true,//--RS on 26th feb 2019, to make field copied
            showstatusbar: false,
            selectionmode:'checkbox',
            ready: function () {

            },

            columns: [
                { text: 'Primary Channel', datafield: 'RcPrimaryChannel',width:'30%' },
                { text: 'Business Unit', datafield: 'LpBusinessUnit', width: '30%' },
                { text: 'Channel', datafield: 'RcName', width: '40%' },

            ]
        });

        $("#jqxgrid").on("bindingcomplete", function (event) {
            var GridRows = $('#jqxgrid').jqxGrid('getrows')

            for (var i = 0; i < GridRows.length; ++i) {
                if (GridRows[i].Select == true) {
                    // Number. The row's bound index.
                    $('#jqxgrid').jqxGrid('selectrow', i);
                }
            }
        });

        $('*', 'form').attr('disabled', 'disabled');
        $(':button').removeAttr('disabled')
        //$('#AddComments').removeAttr('disabled')

        document.getElementById('PortfolioDiv').style.pointerEvents = 'none';
    })






</script>

@using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frm", id = "frm", @encType = "multipart/form-data" }))
{

<div class="form-horizontal">
    <div class="form-group">
        @Html.LabelFor(model => model.LrfRefFileName, htmlAttributes: new { @class = "control-label  col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.LrfRefFileName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.LrfRefFileName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.LrfRefFileTypeId, htmlAttributes: new { @class = "required control-label col-md-2" })
        <div class="col-md-10">
            @if (Enumerable.Count(ViewBag.LrfRefFileTypeId) == 0)
            {
                @Html.DropDownListFor(model => model.LrfRefFileTypeId, null, "No Records Found", new { @class = "form-control" })
            }
            else
            {
                @Html.DropDownListFor(model => model.LrfRefFileTypeId, null, "-- Select Here --", new { @class = "form-control" })
            }
            @Html.ValidationMessageFor(model => model.LrfRefFileTypeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LrfDescription, htmlAttributes: new { @class = "control-label  col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.LrfDescription, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.LrfDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LrfMonth, htmlAttributes: new { @class = "control-label col-md-2 required" })
        <div class="col-md-10">

            @Html.DropDownListFor(model => model.LrfMonth, new List<SelectListItem> { new SelectListItem { Text = "-- Select Here --", Value = null }, new SelectListItem { Text = "01", Value = "01" }, new SelectListItem { Text = "02", Value = "02" }, new SelectListItem { Text = "03", Value = "03" }, new SelectListItem { Text = "04", Value = "04" }, new SelectListItem { Text = "05", Value = "05" }, new SelectListItem { Text = "06", Value = "06" }, new SelectListItem { Text = "07", Value = "07" }, new SelectListItem { Text = "08", Value = "08" }, new SelectListItem { Text = "09", Value = "09" }, new SelectListItem { Text = "10", Value = "10" }, new SelectListItem { Text = "11", Value = "11" }, new SelectListItem { Text = "12", Value = "12" } }, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.LrfMonth, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.LrfYear, htmlAttributes: new { @class = "required control-label col-md-2" })
        <div class="col-md-10">
            @if (Enumerable.Count(ViewBag.LrfYear) == 0)
            {
                @Html.DropDownListFor(model => model.LrfYear, null, "No Records Found", new { @class = "form-control" })
            }
            else
            {
                @Html.DropDownListFor(model => model.LrfYear, null, "-- Select Here --", new { @class = "form-control" })
            }
            @Html.ValidationMessageFor(model => model.LrfYear, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.Label("Select Portfolios", htmlAttributes: new { @class = "control-label col-md-2" })
        <br>
        <div class="col-md-10" id="PortfolioDiv">
            <div id="jqxgrid"></div>
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Comments", htmlAttributes: new { @class = "control-label col-md-2" })
        <br>
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.WFComments, new { @class = "col-md-12 col-lg-12 textarea1 setheight" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Add Comments", htmlAttributes: new { @class = "control-label  col-md-2" })
        <div class="col-md-10">
            <textarea id="AddComments" name="AddComments" class="form-control col-md-12 col-lg-12 textarea1 setheight" style="height:100px" onchange="FnAttachComments(this.value)"></textarea><br>
        </div>
    </div>



    <div class="form-group" id="formPage">
        <div class="col-md-10">
            <button type="button" class="btn btn-borderRed btn-cons" onclick="window.location.href = '@HttpContext.Current.Session["from"]'">Back&nbsp;</button>
            @if (ViewBag.ActionItems != null)
            {
                @Html.Raw(ViewBag.ActionItems)
            }
        </div>

    </div>


</div>
}
@*<br>
    <input type="button" id="Cancel" name="Cancel" Value="Cancel" class="btn btn-danger" onclick="return CancelXhr()"><br>*@
<br>
<div class="col-md-12" id="AttachedFiles"></div>
<br>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

